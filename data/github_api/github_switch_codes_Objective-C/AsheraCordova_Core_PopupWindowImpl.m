// Repository: AsheraCordova/Core
// File: layout/ios/ios/src/PopupWindowImpl.m

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\PopupWindowImpl.java
//

#include "BaseWidget.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayoutImpl.h"
#include "GravityConverter.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "PopupWindow.h"
#include "PopupWindowImpl.h"
#include "RelativeLayout.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"

@class ASPopupWindowImpl_OutsideEventListener;
@protocol JavaUtilMap;


@interface ASPopupWindowImpl () {
 @public
  ADView *viewStub_;
  jint width_;
  jint height_;
  id<ASIWidget> contentView_;
  ADPopupWindow *popupWindow_;
  jboolean outsideTouchable_;
  ASPopupWindowImpl_OutsideEventListener *outsideEventListener_;
}

- (void)showAtLocationWithId:(id)gravity
                      withId:(id)x
                      withId:(id)y;

- (void)applyGravityWithId:(id)gravity
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams;

- (void)setContentViewWithId:(id)objValue;

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params;

- (void)showAsDropDownWithId:(id)anchor
                      withId:(id)gravity
                      withId:(id)xoff
                      withId:(id)yoff;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)dismiss;

- (void)setOutsideTouchableWithId:(id)objValue;

- (void)moveTopTopWithASIWidget:(id<ASIWidget>)parent;

@end

J2OBJC_FIELD_SETTER(ASPopupWindowImpl, viewStub_, ADView *)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl, contentView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl, popupWindow_, ADPopupWindow *)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl, outsideEventListener_, ASPopupWindowImpl_OutsideEventListener *)

__attribute__((unused)) static void ASPopupWindowImpl_showAtLocationWithId_withId_withId_(ASPopupWindowImpl *self, id gravity, id x, id y);

__attribute__((unused)) static void ASPopupWindowImpl_applyGravityWithId_withADRelativeLayout_LayoutParams_(ASPopupWindowImpl *self, id gravity, ADRelativeLayout_LayoutParams *layoutParams);

__attribute__((unused)) static void ASPopupWindowImpl_setContentViewWithId_(ASPopupWindowImpl *self, id objValue);

__attribute__((unused)) static void ASPopupWindowImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASPopupWindowImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params);

__attribute__((unused)) static void ASPopupWindowImpl_showAsDropDownWithId_withId_withId_withId_(ASPopupWindowImpl *self, id anchor, id gravity, id xoff, id yoff);

__attribute__((unused)) static void ASPopupWindowImpl_setWidthWithId_(ASPopupWindowImpl *self, id objValue);

__attribute__((unused)) static void ASPopupWindowImpl_setHeightWithId_(ASPopupWindowImpl *self, id objValue);

__attribute__((unused)) static void ASPopupWindowImpl_dismiss(ASPopupWindowImpl *self);

__attribute__((unused)) static void ASPopupWindowImpl_setOutsideTouchableWithId_(ASPopupWindowImpl *self, id objValue);

__attribute__((unused)) static void ASPopupWindowImpl_moveTopTopWithASIWidget_(ASPopupWindowImpl *self, id<ASIWidget> parent);

@interface ASPopupWindowImpl_ViewExt () {
 @public
  ASPopupWindowImpl *this$0_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASPopupWindowImpl_ViewExt, templates_, id<JavaUtilMap>)

@interface ASPopupWindowImpl_OnDismissListener : NSObject < ADPopupWindow_OnDismissListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onDismiss;

- (id<JavaUtilMap>)getOnDismissEventObj;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPopupWindowImpl_OnDismissListener)

J2OBJC_FIELD_SETTER(ASPopupWindowImpl_OnDismissListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl_OnDismissListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl_OnDismissListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASPopupWindowImpl_OnDismissListener, action_, NSString *)

__attribute__((unused)) static void ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(ASPopupWindowImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASPopupWindowImpl_OnDismissListener *new_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPopupWindowImpl_OnDismissListener *create_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(ASPopupWindowImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASPopupWindowImpl_OnDismissListener *new_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPopupWindowImpl_OnDismissListener *create_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASPopupWindowImpl_OnDismissListener)

@interface ASPopupWindowImpl_OutsideEventListener : ASEventBusHandler {
 @public
  ASPopupWindowImpl *window_;
}

- (instancetype)initWithASPopupWindowImpl:(ASPopupWindowImpl *)window
                             withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPopupWindowImpl_OutsideEventListener)

J2OBJC_FIELD_SETTER(ASPopupWindowImpl_OutsideEventListener, window_, ASPopupWindowImpl *)

__attribute__((unused)) static void ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl_OutsideEventListener *self, ASPopupWindowImpl *window, NSString *type);

__attribute__((unused)) static ASPopupWindowImpl_OutsideEventListener *new_ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl *window, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPopupWindowImpl_OutsideEventListener *create_ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl *window, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASPopupWindowImpl_OutsideEventListener)

NSString *ASPopupWindowImpl_LOCAL_NAME = @"com.ashera.layout.PopupWindow";
NSString *ASPopupWindowImpl_GROUP_NAME = @"PopupWindow";

@implementation ASPopupWindowImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"overlapAnchor"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentView"])) withTypeWithNSString:@"template"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showAtLocation"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showAsDropDown"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dismiss"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDismiss"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"outsideTouchable"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASPopupWindowImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIWidget>)newInstance {
  return new_ASPopupWindowImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  viewStub_ = new_ASPopupWindowImpl_ViewExt_initWithASPopupWindowImpl_(self);
  [self createView];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView_, 0, 0, 0, 0);
  ASPopupWindowImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"overlapAnchor", @"contentView", @"showAtLocation", @"showAsDropDown", @"dismiss", @"onDismiss", @"height", @"width", @"outsideTouchable" }, 9)) {
    case 0:
    {
      [((ADPopupWindow *) nil_chk(popupWindow_)) setOverlapAnchorWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      ASPopupWindowImpl_setContentViewWithId_(self, objValue);
    }
    break;
    case 2:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id x = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"x"] withNSString:@"dimension"];
        id y = [self quickConvertWithId:[data getWithId:@"y"] withNSString:@"dimension"];
        id gravity = [self quickConvertWithId:[data getWithId:@"gravity"] withNSString:@"gravity"];
        ASPopupWindowImpl_showAtLocationWithId_withId_withId_(self, gravity, x, y);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id x = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"x"] withNSString:@"dimension"];
          id y = [self quickConvertWithId:[data getWithId:@"y"] withNSString:@"dimension"];
          id gravity = [self quickConvertWithId:[data getWithId:@"gravity"] withNSString:@"gravity"];
          ASPopupWindowImpl_showAtLocationWithId_withId_withId_(self, gravity, x, y);
        }
      }
    }
    break;
    case 3:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id anchor = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"anchor"] withNSString:@"string"];
        id xoff = [self quickConvertWithId:[data getWithId:@"xoff"] withNSString:@"dimension"];
        id yoff = [self quickConvertWithId:[data getWithId:@"yoff"] withNSString:@"dimension"];
        id gravity = [self quickConvertWithId:[data getWithId:@"gravity"] withNSString:@"gravity"];
        ASPopupWindowImpl_showAsDropDownWithId_withId_withId_withId_(self, anchor, gravity, xoff, yoff);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id anchor = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"anchor"] withNSString:@"string"];
          id xoff = [self quickConvertWithId:[data getWithId:@"xoff"] withNSString:@"dimension"];
          id yoff = [self quickConvertWithId:[data getWithId:@"yoff"] withNSString:@"dimension"];
          id gravity = [self quickConvertWithId:[data getWithId:@"gravity"] withNSString:@"gravity"];
          ASPopupWindowImpl_showAsDropDownWithId_withId_withId_withId_(self, anchor, gravity, xoff, yoff);
        }
      }
    }
    break;
    case 4:
    {
      ASPopupWindowImpl_dismiss(self);
    }
    break;
    case 5:
    {
      [((ADPopupWindow *) nil_chk(popupWindow_)) setOnDismissListenerWithADPopupWindow_OnDismissListener:new_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDismiss")];
    }
    break;
    case 6:
    {
      ASPopupWindowImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASPopupWindowImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASPopupWindowImpl_setOutsideTouchableWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)asWidget {
  return viewStub_;
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (void)showAtLocationWithId:(id)gravity
                      withId:(id)x
                      withId:(id)y {
  ASPopupWindowImpl_showAtLocationWithId_withId_withId_(self, gravity, x, y);
}

- (void)applyGravityWithId:(id)gravity
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams {
  ASPopupWindowImpl_applyGravityWithId_withADRelativeLayout_LayoutParams_(self, gravity, layoutParams);
}

- (void)setContentViewWithId:(id)objValue {
  ASPopupWindowImpl_setContentViewWithId_(self, objValue);
}

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params {
  ASPopupWindowImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)showAsDropDownWithId:(id)anchor
                      withId:(id)gravity
                      withId:(id)xoff
                      withId:(id)yoff {
  ASPopupWindowImpl_showAsDropDownWithId_withId_withId_withId_(self, anchor, gravity, xoff, yoff);
}

- (void)setWidthWithId:(id)objValue {
  ASPopupWindowImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASPopupWindowImpl_setHeightWithId_(self, objValue);
}

- (void)dismiss {
  ASPopupWindowImpl_dismiss(self);
}

- (void)setOutsideTouchableWithId:(id)objValue {
  ASPopupWindowImpl_setOutsideTouchableWithId_(self, objValue);
}

- (void)addOutsideTouchListenerWithBoolean:(jboolean)add {
  ASEvent_StandardEvents *type = JreLoadEnum(ASEvent_StandardEvents, outsideClicked);
  if (outsideEventListener_ != nil) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ outsideEventListener_ } count:1 type:ASEventBusHandler_class_()]];
    outsideEventListener_ = nil;
  }
  if (add) {
    outsideEventListener_ = new_ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(self, [((ASEvent_StandardEvents *) nil_chk(type)) description]);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getEventBus])) onWithNSString:[type description] withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ outsideEventListener_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

- (IOSClass *)getViewClass {
  return ADView_class_();
}

- (void)moveTopTopWithASIWidget:(id<ASIWidget>)parent {
  ASPopupWindowImpl_moveTopTopWithASIWidget_(self, parent);
}

- (id)asNativeWidget {
  return uiView_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(newInstance);
  methods[3].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[4].selector = @selector(createView);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(asWidget);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(showAtLocationWithId:withId:withId:);
  methods[9].selector = @selector(applyGravityWithId:withADRelativeLayout_LayoutParams:);
  methods[10].selector = @selector(setContentViewWithId:);
  methods[11].selector = @selector(nativeCreateWithASIFragment:withJavaUtilMap:);
  methods[12].selector = @selector(showAsDropDownWithId:withId:withId:withId:);
  methods[13].selector = @selector(setWidthWithId:);
  methods[14].selector = @selector(setHeightWithId:);
  methods[15].selector = @selector(dismiss);
  methods[16].selector = @selector(setOutsideTouchableWithId:);
  methods[17].selector = @selector(addOutsideTouchListenerWithBoolean:);
  methods[18].selector = @selector(getViewClass);
  methods[19].selector = @selector(moveTopTopWithASIWidget:);
  methods[20].selector = @selector(asNativeWidget);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "viewStub_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "popupWindow_", "LADPopupWindow;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outsideTouchable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outsideEventListener_", "LASPopupWindowImpl_OutsideEventListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "showAtLocation", "LNSObject;LNSObject;LNSObject;", "applyGravity", "LNSObject;LADRelativeLayout_LayoutParams;", "setContentView", "LNSObject;", "nativeCreate", "showAsDropDown", "LNSObject;LNSObject;LNSObject;LNSObject;", "setWidth", "setHeight", "setOutsideTouchable", "addOutsideTouchListener", "Z", "moveTopTop", "LASIWidget;", &ASPopupWindowImpl_LOCAL_NAME, &ASPopupWindowImpl_GROUP_NAME, "LASPopupWindowImpl_ViewExt;LASPopupWindowImpl_OnDismissListener;LASPopupWindowImpl_OutsideEventListener;" };
  static const J2ObjcClassInfo _ASPopupWindowImpl = { "PopupWindowImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 21, 10, -1, 27, -1, -1, -1 };
  return &_ASPopupWindowImpl;
}

@end

void ASPopupWindowImpl_init(ASPopupWindowImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASPopupWindowImpl_LOCAL_NAME, ASPopupWindowImpl_LOCAL_NAME);
  self->width_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  self->height_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
}

ASPopupWindowImpl *new_ASPopupWindowImpl_init() {
  J2OBJC_NEW_IMPL(ASPopupWindowImpl, init)
}

ASPopupWindowImpl *create_ASPopupWindowImpl_init() {
  J2OBJC_CREATE_IMPL(ASPopupWindowImpl, init)
}

void ASPopupWindowImpl_showAtLocationWithId_withId_withId_(ASPopupWindowImpl *self, id gravity, id x, id y) {
  if ([((ADPopupWindow *) nil_chk(self->popupWindow_)) isShowing]) {
    return;
  }
  id<ASIWidget> parent = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASFrameLayoutImpl_LOCAL_NAME, ASFrameLayoutImpl_GROUP_NAME, (id<ASHasWidgets>) cast_check([((id<ASIFragment>) nil_chk(self->fragment_)) getRootWidget], ASHasWidgets_class_()), false);
  ADView *parentView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(parent)) asWidget], [ADView class]);
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(self->contentView_)) loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>) cast_check(parent, ASHasWidgets_class_())];
  ADRelativeLayout_LayoutParams *layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(parentView)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_ = self->width_;
  layoutParams->height_ = self->height_;
  [((ADPopupWindow *) nil_chk(self->popupWindow_)) setContentViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class])];
  [((ADPopupWindow *) nil_chk(self->popupWindow_)) showAtLocationWithADView:parentView withADRelativeLayout_LayoutParams:layoutParams withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(gravity, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(x, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(y, [JavaLangInteger class]))) intValue]];
  ASPopupWindowImpl_moveTopTopWithASIWidget_(self, parent);
  ASPopupWindowImpl_applyGravityWithId_withADRelativeLayout_LayoutParams_(self, gravity, layoutParams);
  [self addOutsideTouchListenerWithBoolean:self->outsideTouchable_];
}

void ASPopupWindowImpl_applyGravityWithId_withADRelativeLayout_LayoutParams_(ASPopupWindowImpl *self, id gravity, ADRelativeLayout_LayoutParams *layoutParams) {
  if (gravity != nil) {
    jint major = [((JavaLangInteger *) cast_chk(gravity, [JavaLangInteger class])) intValue] & ASGravityConverter_VERTICAL_GRAVITY_MASK;
    switch (major) {
      case ASGravityConverter_TOP:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_TOP withInt:ADRelativeLayout_TRUE];
      break;
      case ASGravityConverter_BOTTOM:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_BOTTOM withInt:ADRelativeLayout_TRUE];
      break;
      case ASGravityConverter_CENTER_VERTICAL:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_CENTER_VERTICAL withInt:ADRelativeLayout_TRUE];
      break;
      default:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_TOP withInt:ADRelativeLayout_TRUE];
      break;
    }
    jint minor = [((JavaLangInteger *) cast_chk(gravity, [JavaLangInteger class])) intValue] & ASGravityConverter_HORIZONTAL_GRAVITY_MASK;
    switch (minor) {
      case ASGravityConverter_LEFT:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_LEFT withInt:ADRelativeLayout_TRUE];
      break;
      case ASGravityConverter_RIGHT:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_RIGHT withInt:ADRelativeLayout_TRUE];
      break;
      case ASGravityConverter_CENTER_HORIZONTAL:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_CENTER_HORIZONTAL withInt:ADRelativeLayout_TRUE];
      break;
      default:
      [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:ADRelativeLayout_ALIGN_LEFT withInt:ADRelativeLayout_TRUE];
      break;
    }
  }
}

void ASPopupWindowImpl_setContentViewWithId_(ASPopupWindowImpl *self, id objValue) {
  self->contentView_ = (id<ASIWidget>) cast_check(objValue, ASIWidget_class_());
}

void ASPopupWindowImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASPopupWindowImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params) {
  self->popupWindow_ = new_ADPopupWindow_init();
}

void ASPopupWindowImpl_showAsDropDownWithId_withId_withId_withId_(ASPopupWindowImpl *self, id anchor, id gravity, id xoff, id yoff) {
  if ([((ADPopupWindow *) nil_chk(self->popupWindow_)) isShowing]) {
    return;
  }
  id<ASIWidget> parent = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASFrameLayoutImpl_LOCAL_NAME, ASFrameLayoutImpl_GROUP_NAME, (id<ASHasWidgets>) cast_check([((id<ASIFragment>) nil_chk(self->fragment_)) getRootWidget], ASHasWidgets_class_()), false);
  ADView *parentView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(parent)) asWidget], [ADView class]);
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(self->contentView_)) loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>) cast_check(parent, ASHasWidgets_class_())];
  id<ASIWidget> anchorWidget = [((id<ASIWidget>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootWidget])) findWidgetByIdWithNSString:(NSString *) cast_chk(anchor, [NSString class])];
  ADRelativeLayout_LayoutParams *layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(parentView)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_ = self->width_;
  layoutParams->height_ = self->height_;
  [((ADPopupWindow *) nil_chk(self->popupWindow_)) setContentViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class])];
  [((ADPopupWindow *) nil_chk(self->popupWindow_)) showAsDropDownWithADView:parentView withADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(anchorWidget)) asWidget], [ADView class]) withADRelativeLayout_LayoutParams:layoutParams withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(xoff, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(yoff, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(gravity, [JavaLangInteger class]))) intValue]];
  ASPopupWindowImpl_moveTopTopWithASIWidget_(self, parent);
  [self addOutsideTouchListenerWithBoolean:self->outsideTouchable_];
}

void ASPopupWindowImpl_setWidthWithId_(ASPopupWindowImpl *self, id objValue) {
  self->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASPopupWindowImpl_setHeightWithId_(ASPopupWindowImpl *self, id objValue) {
  self->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASPopupWindowImpl_dismiss(ASPopupWindowImpl *self) {
  [((ADPopupWindow *) nil_chk(self->popupWindow_)) dismiss];
  [self addOutsideTouchListenerWithBoolean:false];
}

void ASPopupWindowImpl_setOutsideTouchableWithId_(ASPopupWindowImpl *self, id objValue) {
  self->outsideTouchable_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASPopupWindowImpl_moveTopTopWithASIWidget_(ASPopupWindowImpl *self, id<ASIWidget> parent) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPopupWindowImpl)

@implementation ASPopupWindowImpl_ViewExt

- (instancetype)initWithASPopupWindowImpl:(ASPopupWindowImpl *)outer$ {
  ASPopupWindowImpl_ViewExt_initWithASPopupWindowImpl_(self, outer$);
  return self;
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPopupWindowImpl:);
  methods[1].selector = @selector(remeasure);
  methods[2].selector = @selector(inflateViewWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASPopupWindowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LASPopupWindowImpl;", "inflateView", "LNSString;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASPopupWindowImpl_ViewExt = { "ViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 3, 2, 0, -1, -1, -1, -1 };
  return &_ASPopupWindowImpl_ViewExt;
}

@end

void ASPopupWindowImpl_ViewExt_initWithASPopupWindowImpl_(ASPopupWindowImpl_ViewExt *self, ASPopupWindowImpl *outer$) {
  self->this$0_ = outer$;
  ADView_init(self);
}

ASPopupWindowImpl_ViewExt *new_ASPopupWindowImpl_ViewExt_initWithASPopupWindowImpl_(ASPopupWindowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASPopupWindowImpl_ViewExt, initWithASPopupWindowImpl_, outer$)
}

ASPopupWindowImpl_ViewExt *create_ASPopupWindowImpl_ViewExt_initWithASPopupWindowImpl_(ASPopupWindowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASPopupWindowImpl_ViewExt, initWithASPopupWindowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPopupWindowImpl_ViewExt)

@implementation ASPopupWindowImpl_OnDismissListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onDismiss {
  if (action_ == nil || [action_ isEqual:@"onDismiss"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDismiss"];
    id<JavaUtilMap> obj = [self getOnDismissEventObj];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDismissEventObj {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"dismiss"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDismiss" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onDismiss);
  methods[4].selector = @selector(getOnDismissEventObj);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASPopupWindowImpl;" };
  static const J2ObjcClassInfo _ASPopupWindowImpl_OnDismissListener = { "OnDismissListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 3, -1, -1, -1, -1 };
  return &_ASPopupWindowImpl_OnDismissListener;
}

@end

void ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(ASPopupWindowImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASPopupWindowImpl_OnDismissListener *new_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASPopupWindowImpl_OnDismissListener, initWithASIWidget_withNSString_, w, strValue)
}

ASPopupWindowImpl_OnDismissListener *create_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASPopupWindowImpl_OnDismissListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(ASPopupWindowImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASPopupWindowImpl_OnDismissListener *new_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASPopupWindowImpl_OnDismissListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASPopupWindowImpl_OnDismissListener *create_ASPopupWindowImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASPopupWindowImpl_OnDismissListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPopupWindowImpl_OnDismissListener)

@implementation ASPopupWindowImpl_OutsideEventListener

- (instancetype)initWithASPopupWindowImpl:(ASPopupWindowImpl *)window
                             withNSString:(NSString *)type {
  ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(self, window, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASPopupWindowImpl_dismiss(nil_chk(window_));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPopupWindowImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "window_", "LASPopupWindowImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASPopupWindowImpl;LNSString;", "doPerform", "LNSObject;", "LASPopupWindowImpl;" };
  static const J2ObjcClassInfo _ASPopupWindowImpl_OutsideEventListener = { "OutsideEventListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1a, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASPopupWindowImpl_OutsideEventListener;
}

@end

void ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl_OutsideEventListener *self, ASPopupWindowImpl *window, NSString *type) {
  ASEventBusHandler_initWithNSString_(self, type);
  self->window_ = window;
}

ASPopupWindowImpl_OutsideEventListener *new_ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl *window, NSString *type) {
  J2OBJC_NEW_IMPL(ASPopupWindowImpl_OutsideEventListener, initWithASPopupWindowImpl_withNSString_, window, type)
}

ASPopupWindowImpl_OutsideEventListener *create_ASPopupWindowImpl_OutsideEventListener_initWithASPopupWindowImpl_withNSString_(ASPopupWindowImpl *window, NSString *type) {
  J2OBJC_CREATE_IMPL(ASPopupWindowImpl_OutsideEventListener, initWithASPopupWindowImpl_withNSString_, window, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPopupWindowImpl_OutsideEventListener)
