begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|number
name|int
name|number
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|method1
name|void
name|method1
parameter_list|()
block|{
name|number
operator|*=
literal|5
expr_stmt|;
name|number
operator|/=
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|method2
name|void
name|method2
parameter_list|()
block|{
name|number
operator|*=
literal|3
expr_stmt|;
name|number
operator|/=
literal|2
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|// method1()
end_comment
begin_expr_stmt
name|number
operator|*=
literal|5
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 30
end_comment
begin_expr_stmt
name|number
operator|/=
literal|4
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 7
end_comment
begin_comment
comment|// method2()
end_comment
begin_expr_stmt
name|number
operator|*=
literal|3
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 21
end_comment
begin_expr_stmt
name|number
operator|/=
literal|2
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 10
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|// Thread 1 calls method1()
end_comment
begin_expr_stmt
name|number
operator|*=
literal|5
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 30
end_comment
begin_comment
comment|// Thread 2 calls method2().
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Most likely Thread 1 has been put to sleep by the operating
end_comment
begin_comment
comment|// system to allow Thread 2 to run.
end_comment
begin_expr_stmt
name|number
operator|*=
literal|3
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 90
end_comment
begin_expr_stmt
name|number
operator|/=
literal|2
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 45
end_comment
begin_comment
comment|// Thread 1 finishes executing.
end_comment
begin_expr_stmt
name|number
operator|/=
literal|4
expr_stmt|;
end_expr_stmt
begin_comment
comment|// number is now 11, instead of 10
end_comment
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
DECL|variable|mutex
name|QMutex
name|mutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|number
name|int
name|number
init|=
literal|6
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|method1
name|void
name|method1
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|number
operator|*=
literal|5
expr_stmt|;
name|number
operator|/=
literal|4
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|method2
name|void
name|method2
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|number
operator|*=
literal|3
expr_stmt|;
name|number
operator|/=
literal|2
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|complexFunction
name|int
name|complexFunction
parameter_list|(
name|int
name|flag
parameter_list|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|int
name|retVal
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
name|retVal
operator|=
name|moreComplexFunction
argument_list|(
name|flag
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
block|{
name|int
name|status
init|=
name|anotherFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|<
literal|0
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
operator|-
literal|2
return|;
block|}
name|retVal
operator|=
name|status
operator|+
name|flag
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|flag
operator|>
literal|10
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
break|break;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|retVal
return|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|complexFunction
name|int
name|complexFunction
parameter_list|(
name|int
name|flag
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|int
name|retVal
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
return|return
name|moreComplexFunction
argument_list|(
name|flag
argument_list|)
return|;
case|case
literal|2
case|:
block|{
name|int
name|status
init|=
name|anotherFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|<
literal|0
condition|)
return|return
operator|-
literal|2
return|;
name|retVal
operator|=
name|status
operator|+
name|flag
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|flag
operator|>
literal|10
condition|)
return|return
operator|-
literal|1
return|;
break|break;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_class
DECL|class|SignalWaiter
class|class
name|SignalWaiter
block|{
private|private:
DECL|member|locker
name|QMutexLocker
name|locker
decl_stmt|;
public|public:
DECL|function|SignalWaiter
name|SignalWaiter
parameter_list|(
name|QMutex
modifier|*
name|mutex
parameter_list|)
member_init_list|:
name|locker
argument_list|(
name|mutex
argument_list|)
block|{     }
DECL|function|waitForSignal
name|void
name|waitForSignal
parameter_list|()
block|{
operator|...
while|while
condition|(
operator|!
name|signalled
condition|)
name|waitCondition
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
operator|...
block|}
block|}
class|;
end_class
begin_comment
comment|//! [6]
end_comment
end_unit
