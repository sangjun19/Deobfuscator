// Repository: mikalv/objc-i2p
// File: net/i2p/util/SSLEepGet.mm

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SSLEepGet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PipedInputStream.h"
#include "java/io/PipedOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/ExceptionInInitializerError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/MalformedURLException.h"
#include "java/net/Socket.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/KeyStore.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/socks/SOCKS4Client.h"
#include "net/i2p/socks/SOCKS5Client.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/DNSOverHTTPS.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/I2PSSLSocketFactory.h"
#include "net/i2p/util/InternalSocket.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SSLEepGet.h"
#include "net/i2p/util/SocketTimeout.h"

@class NetI2pUtilSSLEepGet_SavingTrustManager;

@interface NetI2pUtilSSLEepGet () {
 @public
  jint _saveCerts_;
  jboolean _bypassVerification_;
  jboolean _commandLine_;
  JavaxNetSslSSLContext *_sslContext_;
  NetI2pUtilSSLEepGet_SavingTrustManager *_stm_;
  NetI2pUtilSSLEepGet_ProxyType *_proxyType_;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)outputFile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state;

+ (void)usage;

- (JavaxNetSslSSLContext *)initSSLContext OBJC_METHOD_FAMILY_NONE;

+ (void)saveCertsWithNSString:(NSString *)host
withNetI2pUtilSSLEepGet_SavingTrustManager:(NetI2pUtilSSLEepGet_SavingTrustManager *)stm;

- (void)httpProxyConnectWithNSString:(NSString *)host
                             withInt:(jint)port;

- (void)internalHttpProxyConnectWithNSString:(NSString *)host
                                     withInt:(jint)port;

- (void)httpProxyConnectWithJavaNetSocket:(JavaNetSocket *)proxy
                             withNSString:(NSString *)host
                                  withInt:(jint)port;

- (void)socksProxyConnectWithBoolean:(jboolean)isSocks5
                        withNSString:(NSString *)host
                             withInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet, _sslContext_, JavaxNetSslSSLContext *)
J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet, _stm_, NetI2pUtilSSLEepGet_SavingTrustManager *)
J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet, _proxyType_, NetI2pUtilSSLEepGet_ProxyType *)

inline NSString *NetI2pUtilSSLEepGet_get_CERT_DIR(void);
static NSString *NetI2pUtilSSLEepGet_CERT_DIR = @"certificates/ssl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilSSLEepGet, CERT_DIR, NSString *)

inline NSString *NetI2pUtilSSLEepGet_get_PROP_USE_DNS_OVER_HTTPS(void);
static NSString *NetI2pUtilSSLEepGet_PROP_USE_DNS_OVER_HTTPS = @"eepget.useDNSOverHTTPS";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilSSLEepGet, PROP_USE_DNS_OVER_HTTPS, NSString *)

inline jboolean NetI2pUtilSSLEepGet_get_DEFAULT_USE_DNS_OVER_HTTPS(void);
#define NetI2pUtilSSLEepGet_DEFAULT_USE_DNS_OVER_HTTPS false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSSLEepGet, DEFAULT_USE_DNS_OVER_HTTPS, jboolean)

__attribute__((unused)) static void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state);

__attribute__((unused)) static NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_usage(void);

__attribute__((unused)) static JavaxNetSslSSLContext *NetI2pUtilSSLEepGet_initSSLContext(NetI2pUtilSSLEepGet *self);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(NSString *host, NetI2pUtilSSLEepGet_SavingTrustManager *stm);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_httpProxyConnectWithNSString_withInt_(NetI2pUtilSSLEepGet *self, NSString *host, jint port);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_internalHttpProxyConnectWithNSString_withInt_(NetI2pUtilSSLEepGet *self, NSString *host, jint port);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_httpProxyConnectWithJavaNetSocket_withNSString_withInt_(NetI2pUtilSSLEepGet *self, JavaNetSocket *proxy, NSString *host, jint port);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_socksProxyConnectWithBoolean_withNSString_withInt_(NetI2pUtilSSLEepGet *self, jboolean isSocks5, NSString *host, jint port);

__attribute__((unused)) static void NetI2pUtilSSLEepGet_ProxyType_initWithNSString_withInt_(NetI2pUtilSSLEepGet_ProxyType *self, NSString *__name, jint __ordinal);

@interface NetI2pUtilSSLEepGet_SavingTrustManager : NSObject < JavaxNetSslX509TrustManager > {
 @public
  id<JavaxNetSslX509TrustManager> tm_;
  IOSObjectArray *chain_;
}

- (instancetype)initWithJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)tm;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSSLEepGet_SavingTrustManager)

J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet_SavingTrustManager, tm_, id<JavaxNetSslX509TrustManager>)
J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet_SavingTrustManager, chain_, IOSObjectArray *)

__attribute__((unused)) static void NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(NetI2pUtilSSLEepGet_SavingTrustManager *self, id<JavaxNetSslX509TrustManager> tm);

__attribute__((unused)) static NetI2pUtilSSLEepGet_SavingTrustManager *new_NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(id<JavaxNetSslX509TrustManager> tm) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSSLEepGet_SavingTrustManager *create_NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(id<JavaxNetSslX509TrustManager> tm);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSSLEepGet_SavingTrustManager)

@interface NetI2pUtilSSLEepGet_SSLState () {
 @public
  JavaxNetSslSSLContext *context_;
}

- (instancetype)initWithJavaxNetSslSSLContext:(JavaxNetSslSSLContext *)ctx;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSSLEepGet_SSLState, context_, JavaxNetSslSSLContext *)

__attribute__((unused)) static void NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(NetI2pUtilSSLEepGet_SSLState *self, JavaxNetSslSSLContext *ctx);

__attribute__((unused)) static NetI2pUtilSSLEepGet_SSLState *new_NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSSLEepGet_SSLState *create_NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *ctx);

@implementation NetI2pUtilSSLEepGet

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_(self, ctx, outputStream, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputStream, url, state);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(self, ctx, outputFile, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputFile, url, state);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
          withNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_(self, ctx, type, proxyHost, proxyPort, outputStream, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
          withNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, type, proxyHost, proxyPort, outputStream, url, state);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
          withNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(self, ctx, type, proxyHost, proxyPort, outputFile, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
          withNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, type, proxyHost, proxyPort, outputFile, url, state);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)outputFile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)state {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputFile, outputStream, url, state);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilSSLEepGet_mainWithNSStringArray_(args);
}

+ (void)usage {
  NetI2pUtilSSLEepGet_usage();
}

- (JavaxNetSslSSLContext *)initSSLContext {
  return NetI2pUtilSSLEepGet_initSSLContext(self);
}

+ (void)saveCertsWithNSString:(NSString *)host
withNetI2pUtilSSLEepGet_SavingTrustManager:(NetI2pUtilSSLEepGet_SavingTrustManager *)stm {
  NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(host, stm);
}

- (NetI2pUtilSSLEepGet_SSLState *)getSSLState {
  return create_NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(_sslContext_);
}

- (void)doFetchWithNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)timeout {
  _aborted_ = false;
  [self readHeaders];
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP headers");
  if (timeout != nil) {
    [timeout resetTimer];
    if (_fetchInactivityTimeout_ > 0) [timeout setInactivityTimeoutWithLong:_fetchInactivityTimeout_];
    else [timeout setInactivityTimeoutWithLong:60 * 1000];
  }
  if (_fetchInactivityTimeout_ > 0) [((JavaNetSocket *) nil_chk(_proxy_)) setSoTimeoutWithInt:_fetchInactivityTimeout_];
  else [((JavaNetSocket *) nil_chk(_proxy_)) setSoTimeoutWithInt:NetI2pUtilEepGet_INACTIVITY_TIMEOUT];
  if (_redirectLocation_ != nil) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Server redirect to ", _redirectLocation_, @" not allowed"));
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Headers read completely, reading ", _bytesRemaining_)];
  jboolean strictSize = (_bytesRemaining_ >= 0);
  JavaLangThread *pusher = nil;
  JreStrongAssign(&_decompressException_, nil);
  if (_isGzippedResponse_) {
    JavaIoPipedInputStream *pi = create_JavaIoPipedInputStream_initWithInt_(64 * 1024);
    JavaIoPipedOutputStream *po = create_JavaIoPipedOutputStream_initWithJavaIoPipedInputStream_(pi);
    pusher = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(create_NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(self, pi, _out_), @"EepGet Decompressor");
    JreStrongAssign(&_out_, po);
    [pusher start];
  }
  jint remaining = (jint) _bytesRemaining_;
  IOSByteArray *buf = [IOSByteArray arrayWithLength:16 * 1024];
  while (_keepFetching_ && ((remaining > 0) || !strictSize) && !_aborted_) {
    jint toRead = buf->size_;
    if (strictSize && toRead > remaining) toRead = remaining;
    jint read = [((JavaIoInputStream *) nil_chk(_proxyIn_)) readWithByteArray:buf withInt:0 withInt:toRead];
    if (read == -1) break;
    if (timeout != nil) [timeout resetTimer];
    [((JavaIoOutputStream *) nil_chk(_out_)) writeWithByteArray:buf withInt:0 withInt:read];
    _bytesTransferred_ += read;
    remaining -= read;
    if (remaining == 0 && _encodingChunked_) {
      jint char1 = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
      if (char1 == 0x000d) {
        jint char2 = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
        if (char2 == 0x000a) {
          remaining = (jint) [self readChunkLength];
        }
        else {
          [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char1];
          [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char2];
          _bytesTransferred_ += 2;
          remaining -= 2;
          read += 2;
        }
      }
      else {
        [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char1];
        _bytesTransferred_++;
        remaining--;
        read++;
      }
    }
    if (timeout != nil) [timeout resetTimer];
    if (_bytesRemaining_ >= read) _bytesRemaining_ -= read;
    if (read > 0) {
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) bytesTransferredWithLong:_alreadyTransferred_ withInt:read withLong:_bytesTransferred_ withLong:_encodingChunked_ ? -1 : _bytesRemaining_ withNSString:_url_];
      _alreadyTransferred_ += read;
    }
  }
  if (_out_ != nil) [_out_ close];
  JreStrongAssign(&_out_, nil);
  if (_isGzippedResponse_) {
    @try {
      [((JavaLangThread *) nil_chk(pusher)) join];
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    pusher = nil;
    if (_decompressException_ != nil) {
      _keepFetching_ = false;
      @throw _decompressException_;
    }
  }
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP data");
  if (timeout != nil) [timeout cancel];
  if (_transferFailed_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) attemptFailedWithNSString:_url_ withLong:_bytesTransferred_ withLong:_bytesRemaining_ withInt:_currentAttempt_ withInt:_numRetries_ withJavaLangException:create_JavaLangException_initWithNSString_(@"Attempt failed")];
  }
  else if ((_bytesRemaining_ == -1) || (remaining == 0)) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) transferCompleteWithLong:_alreadyTransferred_ withLong:_bytesTransferred_ withLong:_encodingChunked_ ? -1 : _bytesRemaining_ withNSString:_url_ withNSString:_outputFile_ withBoolean:_notModified_];
  }
  else {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$J", @"Disconnection on attempt ", _currentAttempt_, @" after ", _bytesTransferred_));
  }
}

- (void)sendRequestWithNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)timeout {
  if (_outputStream_ != nil) {
  }
  else {
    JavaIoFile *outFile = create_JavaIoFile_initWithNSString_(_outputFile_);
    if ([outFile exists]) _alreadyTransferred_ = [outFile length];
  }
  NSString *req = [self getRequest];
  NSString *host;
  jint port;
  @try {
    JavaNetURI *url = create_JavaNetURI_initWithNSString_(_actualURL_);
    if ([@"https" isEqual:[url getScheme]]) {
      host = [url getHost];
      if (host == nil) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL");
      if ([((NSString *) nil_chk([host java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasSuffix:@".i2p"]) @throw create_JavaNetMalformedURLException_initWithNSString_(@"I2P addresses unsupported");
      port = [url getPort];
      if (port == -1) port = 443;
      NSString *originalHost = host;
      jboolean useDNSOverHTTPS = [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pUtilSSLEepGet_PROP_USE_DNS_OVER_HTTPS withBoolean:NetI2pUtilSSLEepGet_DEFAULT_USE_DNS_OVER_HTTPS];
      if (useDNSOverHTTPS && ![host isEqual:@"dns.google.com"] && !NetI2pUtilAddresses_isIPAddressWithNSString_(host)) {
        NetI2pUtilDNSOverHTTPS *doh = create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(_context_, [self getSSLState]);
        NSString *ip = [doh lookupWithNSString:host];
        if (ip != nil) host = ip;
      }
      if (_shouldProxy_) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Connecting to ", _proxyType_, @" proxy")];
        switch ([_proxyType_ ordinal]) {
          case NetI2pUtilSSLEepGet_ProxyType_Enum_HTTP:
          NetI2pUtilSSLEepGet_httpProxyConnectWithNSString_withInt_(self, host, port);
          break;
          case NetI2pUtilSSLEepGet_ProxyType_Enum_INTERNAL:
          NetI2pUtilSSLEepGet_internalHttpProxyConnectWithNSString_withInt_(self, host, port);
          break;
          case NetI2pUtilSSLEepGet_ProxyType_Enum_SOCKS4:
          NetI2pUtilSSLEepGet_socksProxyConnectWithBoolean_withNSString_withInt_(self, false, host, port);
          break;
          case NetI2pUtilSSLEepGet_ProxyType_Enum_SOCKS5:
          NetI2pUtilSSLEepGet_socksProxyConnectWithBoolean_withNSString_withInt_(self, true, host, port);
          break;
          case NetI2pUtilSSLEepGet_ProxyType_Enum_HTTPS:
          case NetI2pUtilSSLEepGet_ProxyType_Enum_TRANSPARENT:
          default:
          @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Unsupported proxy type ", _proxyType_));
        }
        if (_sslContext_ != nil) JreStrongAssign(&_proxy_, [((JavaxNetSslSSLSocketFactory *) nil_chk([_sslContext_ getSocketFactory])) createSocketWithJavaNetSocket:_proxy_ withNSString:host withInt:port withBoolean:true]);
        else JreStrongAssign(&_proxy_, [((JavaxNetSslSSLSocketFactory *) nil_chk(((JavaxNetSslSSLSocketFactory *) cast_chk(JavaxNetSslSSLSocketFactory_getDefault(), [JavaxNetSslSSLSocketFactory class])))) createSocketWithJavaNetSocket:_proxy_ withNSString:host withInt:port withBoolean:true]);
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("@$", _proxyType_, @" proxy headers read completely")];
      }
      else {
        if (_sslContext_ != nil) JreStrongAssign(&_proxy_, [((JavaxNetSslSSLSocketFactory *) nil_chk([_sslContext_ getSocketFactory])) createSocketWithNSString:host withInt:port]);
        else JreStrongAssign(&_proxy_, [((JavaxNetSocketFactory *) nil_chk(JavaxNetSslSSLSocketFactory_getDefault())) createSocketWithNSString:host withInt:port]);
        if (_fetchHeaderTimeout_ > 0) {
          [((JavaNetSocket *) nil_chk(_proxy_)) setSoTimeoutWithInt:_fetchHeaderTimeout_];
        }
      }
      JavaxNetSslSSLSocket *socket = (JavaxNetSslSSLSocket *) cast_chk(_proxy_, [JavaxNetSslSSLSocket class]);
      NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(socket);
      if (!_bypassVerification_) {
        @try {
          NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(_context_, socket, originalHost);
        }
        @catch (JavaxNetSslSSLException *ssle) {
          if (_saveCerts_ > 0 && _stm_ != nil) NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(host, _stm_);
          @throw ssle;
        }
      }
    }
    else {
      @throw create_JavaNetMalformedURLException_initWithNSString_(JreStrcat("$$", @"Only https supported: ", _actualURL_));
    }
  }
  @catch (JavaNetURISyntaxException *use) {
    JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Redirected to invalid URL");
    [ioe initCauseWithJavaLangThrowable:use];
    @throw ioe;
  }
  JreStrongAssign(&_proxyIn_, [((JavaNetSocket *) nil_chk(_proxy_)) getInputStream]);
  JreStrongAssign(&_proxyOut_, [((JavaNetSocket *) nil_chk(_proxy_)) getOutputStream]);
  @try {
    [((JavaIoOutputStream *) nil_chk(_proxyOut_)) writeWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(req)];
    [((JavaIoOutputStream *) nil_chk(_proxyOut_)) flush];
    if (_saveCerts_ > 1 && _stm_ != nil) NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(host, _stm_);
  }
  @catch (JavaxNetSslSSLException *sslhe) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$CI$", @"SSL negotiation error with ", host, ':', port, @" - self-signed certificate or untrusted certificate authority?") withJavaLangThrowable:sslhe];
    if (_saveCerts_ > 0 && _stm_ != nil) NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(host, _stm_);
    else if (_commandLine_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"FAILED (probably due to untrusted certificates) - Run with -s option to save certificates"];
    }
    @throw sslhe;
  }
  JreStrongAssignAndConsume(&_proxyIn_, new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(_proxyIn_));
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Request flushed"];
}

- (void)httpProxyConnectWithNSString:(NSString *)host
                             withInt:(jint)port {
  NetI2pUtilSSLEepGet_httpProxyConnectWithNSString_withInt_(self, host, port);
}

- (void)internalHttpProxyConnectWithNSString:(NSString *)host
                                     withInt:(jint)port {
  NetI2pUtilSSLEepGet_internalHttpProxyConnectWithNSString_withInt_(self, host, port);
}

- (void)httpProxyConnectWithJavaNetSocket:(JavaNetSocket *)proxy
                             withNSString:(NSString *)host
                                  withInt:(jint)port {
  NetI2pUtilSSLEepGet_httpProxyConnectWithJavaNetSocket_withNSString_withInt_(self, proxy, host, port);
}

- (void)socksProxyConnectWithBoolean:(jboolean)isSocks5
                        withNSString:(NSString *)host
                             withInt:(jint)port {
  NetI2pUtilSSLEepGet_socksProxyConnectWithBoolean_withNSString_withInt_(self, isSocks5, host, port);
}

- (void)dealloc {
  RELEASE_(_sslContext_);
  RELEASE_(_stm_);
  RELEASE_(_proxyType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNetSslSSLContext;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSSLEepGet_SSLState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 18, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 20, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withJavaIoOutputStream:withNSString:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withJavaIoOutputStream:withNSString:withNetI2pUtilSSLEepGet_SSLState:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withNSString:);
  methods[3].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withNSString:withNetI2pUtilSSLEepGet_SSLState:);
  methods[4].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilSSLEepGet_ProxyType:withNSString:withInt:withJavaIoOutputStream:withNSString:);
  methods[5].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilSSLEepGet_ProxyType:withNSString:withInt:withJavaIoOutputStream:withNSString:withNetI2pUtilSSLEepGet_SSLState:);
  methods[6].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilSSLEepGet_ProxyType:withNSString:withInt:withNSString:withNSString:);
  methods[7].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilSSLEepGet_ProxyType:withNSString:withInt:withNSString:withNSString:withNetI2pUtilSSLEepGet_SSLState:);
  methods[8].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withJavaIoOutputStream:withNSString:withNetI2pUtilSSLEepGet_SSLState:);
  methods[9].selector = @selector(mainWithNSStringArray:);
  methods[10].selector = @selector(usage);
  methods[11].selector = @selector(initSSLContext);
  methods[12].selector = @selector(saveCertsWithNSString:withNetI2pUtilSSLEepGet_SavingTrustManager:);
  methods[13].selector = @selector(getSSLState);
  methods[14].selector = @selector(doFetchWithNetI2pUtilSocketTimeout:);
  methods[15].selector = @selector(sendRequestWithNetI2pUtilSocketTimeout:);
  methods[16].selector = @selector(httpProxyConnectWithNSString:withInt:);
  methods[17].selector = @selector(internalHttpProxyConnectWithNSString:withInt:);
  methods[18].selector = @selector(httpProxyConnectWithJavaNetSocket:withNSString:withInt:);
  methods[19].selector = @selector(socksProxyConnectWithBoolean:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_saveCerts_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bypassVerification_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_commandLine_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sslContext_", "LJavaxNetSslSSLContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_stm_", "LNetI2pUtilSSLEepGet_SavingTrustManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_proxyType_", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CERT_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "PROP_USE_DNS_OVER_HTTPS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "DEFAULT_USE_DNS_OVER_HTTPS", "Z", .constantValue.asBOOL = NetI2pUtilSSLEepGet_DEFAULT_USE_DNS_OVER_HTTPS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LJavaIoOutputStream;LNSString;", "LNetI2pI2PAppContext;LJavaIoOutputStream;LNSString;LNetI2pUtilSSLEepGet_SSLState;", "LNetI2pI2PAppContext;LNSString;LNSString;", "LNetI2pI2PAppContext;LNSString;LNSString;LNetI2pUtilSSLEepGet_SSLState;", "LNetI2pI2PAppContext;LNetI2pUtilSSLEepGet_ProxyType;LNSString;ILJavaIoOutputStream;LNSString;", "LNetI2pI2PAppContext;LNetI2pUtilSSLEepGet_ProxyType;LNSString;ILJavaIoOutputStream;LNSString;LNetI2pUtilSSLEepGet_SSLState;", "LNetI2pI2PAppContext;LNetI2pUtilSSLEepGet_ProxyType;LNSString;ILNSString;LNSString;", "LNetI2pI2PAppContext;LNetI2pUtilSSLEepGet_ProxyType;LNSString;ILNSString;LNSString;LNetI2pUtilSSLEepGet_SSLState;", "LNetI2pI2PAppContext;LNSString;LJavaIoOutputStream;LNSString;LNetI2pUtilSSLEepGet_SSLState;", "main", "[LNSString;", "saveCerts", "LNSString;LNetI2pUtilSSLEepGet_SavingTrustManager;", "doFetch", "LNetI2pUtilSocketTimeout;", "LJavaIoIOException;", "sendRequest", "httpProxyConnect", "LNSString;I", "internalHttpProxyConnect", "LJavaNetSocket;LNSString;I", "socksProxyConnect", "ZLNSString;I", &NetI2pUtilSSLEepGet_CERT_DIR, &NetI2pUtilSSLEepGet_PROP_USE_DNS_OVER_HTTPS, "LNetI2pUtilSSLEepGet_ProxyType;LNetI2pUtilSSLEepGet_SavingTrustManager;LNetI2pUtilSSLEepGet_SSLState;" };
  static const J2ObjcClassInfo _NetI2pUtilSSLEepGet = { "SSLEepGet", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 20, 9, -1, 25, -1, -1, -1 };
  return &_NetI2pUtilSSLEepGet;
}

@end

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputStream, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_(NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_, ctx, outputStream, url)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_(NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_, ctx, outputStream, url)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, nil, outputStream, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputStream, url, state)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputStream, url, state)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputFile, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withNSString_, ctx, outputFile, url)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withNSString_, ctx, outputFile, url)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, outputFile, nil, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputFile, url, state)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputFile, url, state)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, type, proxyHost, proxyPort, outputStream, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_, ctx, type, proxyHost, proxyPort, outputStream, url)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_, ctx, type, proxyHost, proxyPort, outputStream, url)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, type != JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE), proxyHost, proxyPort, 0, -1, -1, nil, outputStream, url, true, nil, nil);
  if (type != JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE) && !self->_shouldProxy_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad proxy params");
  JreStrongAssign(&self->_proxyType_, type);
  if (state != nil && state->context_ != nil) JreStrongAssign(&self->_sslContext_, state->context_);
  else JreStrongAssign(&self->_sslContext_, NetI2pUtilSSLEepGet_initSSLContext(self));
  if (self->_sslContext_ == nil) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Failed to initialize custom SSL context, using default context"];
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, type, proxyHost, proxyPort, outputStream, url, state)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, type, proxyHost, proxyPort, outputStream, url, state)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url) {
  NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self, ctx, type, proxyHost, proxyPort, outputFile, url, nil);
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_, ctx, type, proxyHost, proxyPort, outputFile, url)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_, ctx, type, proxyHost, proxyPort, outputFile, url)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, type != JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE), proxyHost, proxyPort, 0, -1, -1, outputFile, nil, url, true, nil, nil);
  if (type != JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE) && !self->_shouldProxy_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad proxy params");
  JreStrongAssign(&self->_proxyType_, type);
  if (state != nil && state->context_ != nil) JreStrongAssign(&self->_sslContext_, state->context_);
  else JreStrongAssign(&self->_sslContext_, NetI2pUtilSSLEepGet_initSSLContext(self));
  if (self->_sslContext_ == nil) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Failed to initialize custom SSL context, using default context"];
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, type, proxyHost, proxyPort, outputFile, url, state)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NetI2pUtilSSLEepGet_ProxyType *type, NSString *proxyHost, jint proxyPort, NSString *outputFile, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, type, proxyHost, proxyPort, outputFile, url, state)
}

void NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilSSLEepGet *self, NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, false, nil, -1, 0, -1, -1, outputFile, outputStream, url, true, nil, nil);
  JreStrongAssign(&self->_proxyType_, JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE));
  if (state != nil && state->context_ != nil) JreStrongAssign(&self->_sslContext_, state->context_);
  else JreStrongAssign(&self->_sslContext_, NetI2pUtilSSLEepGet_initSSLContext(self));
  if (self->_sslContext_ == nil) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Failed to initialize custom SSL context, using default context"];
}

NetI2pUtilSSLEepGet *new_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputFile, outputStream, url, state)
}

NetI2pUtilSSLEepGet *create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *ctx, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, NetI2pUtilSSLEepGet_SSLState *state) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet, initWithNetI2pI2PAppContext_withNSString_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_, ctx, outputFile, outputStream, url, state)
}

void NetI2pUtilSSLEepGet_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilSSLEepGet_initialize();
  jint saveCerts = 0;
  jboolean noVerify = false;
  NSString *proxyHost = @"127.0.0.1";
  jint proxyPort = 0;
  NetI2pUtilSSLEepGet_ProxyType *ptype = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE);
  jboolean error = false;
  GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"ssleepget", args, @"p:y:sz");
  @try {
    jint c;
    while ((c = [g getopt]) != -1) {
      {
        NSString *s;
        jint colon;
        NSString *y;
        switch (c) {
          case 'p':
          s = [g getOptarg];
          colon = [((NSString *) nil_chk(s)) java_indexOf:':'];
          if (colon >= 0) {
            proxyHost = [s java_substring:0 endIndex:colon];
            NSString *port = [s java_substring:colon + 1];
            proxyPort = JavaLangInteger_parseIntWithNSString_(port);
          }
          else {
            proxyHost = s;
          }
          break;
          case 'y':
          y = [((NSString *) nil_chk([g getOptarg])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
          if ([((NSString *) nil_chk(y)) isEqual:@"HTTP"] || [y isEqual:@"HTTPS"]) {
            ptype = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, HTTP);
          }
          else if ([y isEqual:@"SOCKS4"]) {
            ptype = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS4);
          }
          else if ([y isEqual:@"SOCKS5"]) {
            ptype = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS5);
          }
          else if ([y isEqual:@"I2P"]) {
            ptype = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, INTERNAL);
            proxyHost = @"localhost";
            proxyPort = 4444;
          }
          else {
            error = true;
          }
          break;
          case 's':
          saveCerts++;
          break;
          case 'z':
          noVerify = true;
          break;
          case '?':
          case ':':
          default:
          error = true;
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [e printStackTrace];
    error = true;
  }
  if (error || ((IOSObjectArray *) nil_chk(args))->size_ - [g getOptind] != 1) {
    NetI2pUtilSSLEepGet_usage();
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *url = IOSObjectArray_Get(nil_chk(args), [g getOptind]);
  NSString *saveAs = NetI2pUtilEepGet_suggestNameWithNSString_(url);
  NetI2pUtilSSLEepGet *get;
  if (proxyHost != nil) {
    if (proxyPort == 0) {
      if (ptype == JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, HTTP)) proxyPort = 8080;
      else proxyPort = 1080;
    }
    get = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(NetI2pI2PAppContext_getGlobalContext(), ptype, proxyHost, proxyPort, saveAs, url);
  }
  else {
    get = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(NetI2pI2PAppContext_getGlobalContext(), saveAs, url);
  }
  if (saveCerts > 0) get->_saveCerts_ = saveCerts;
  if (noVerify) get->_bypassVerification_ = true;
  get->_commandLine_ = true;
  [get addStatusListenerWithNetI2pUtilEepGet_StatusListener:create_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(get, 1024, 40)];
  if (![get fetchWithLong:45 * 1000 withLong:-1 withLong:60 * 1000]) JavaLangSystem_exitWithInt_(1);
}

void NetI2pUtilSSLEepGet_usage() {
  NetI2pUtilSSLEepGet_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: SSLEepGet [-psyz] https://url\n  -p proxyHost[:proxyPort]    // default port 8080 for HTTPS and 1080 for SOCKS; default localhost:4444 for I2P\n  -y HTTPS|SOCKS4|SOCKS5|I2P  // proxy type, default HTTPS if proxyHost is set\n  -s save unknown certs\n  -s -s save all certs\n  -z bypass hostname verification"];
}

JavaxNetSslSSLContext *NetI2pUtilSSLEepGet_initSSLContext(NetI2pUtilSSLEepGet *self) {
  JavaSecurityKeyStore *ks = NetI2pCryptoKeyStoreUtil_loadSystemKeyStore();
  if (ks == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Key Store init error"];
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jint count = NetI2pCryptoKeyStoreUtil_countCertsWithJavaSecurityKeyStore_(ks);
    [self->_log_ infoWithNSString:JreStrcat("$I$", @"Loaded ", count, @" default trusted certificates")];
  }
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getBaseDir], NetI2pUtilSSLEepGet_CERT_DIR);
  jint adds = NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir, ks);
  jint totalAdds = adds;
  if (adds > 0 && [self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$$", @"Loaded ", adds, @" trusted certificates from ", [dir getAbsolutePath])];
  if (![((NSString *) nil_chk([((JavaIoFile *) nil_chk([self->_context_ getBaseDir])) getAbsolutePath])) isEqual:[((JavaIoFile *) nil_chk([self->_context_ getConfigDir])) getAbsolutePath]]) {
    dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], NetI2pUtilSSLEepGet_CERT_DIR);
    adds = NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir, ks);
    totalAdds += adds;
    if (adds > 0 && [self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$$", @"Loaded ", adds, @" trusted certificates from ", [dir getAbsolutePath])];
  }
  dir = create_JavaIoFile_initWithNSString_(JavaLangSystem_getPropertyWithNSString_(@"user.dir"));
  if (![((NSString *) nil_chk([((JavaIoFile *) nil_chk([self->_context_ getBaseDir])) getAbsolutePath])) isEqual:[dir getAbsolutePath]]) {
    dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], NetI2pUtilSSLEepGet_CERT_DIR);
    adds = NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir, ks);
    totalAdds += adds;
    if (adds > 0 && [self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$$", @"Loaded ", adds, @" trusted certificates from ", [dir getAbsolutePath])];
  }
  if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$", @"Loaded total of ", totalAdds, @" new trusted certificates")];
  @try {
    JavaxNetSslSSLContext *sslc = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
    JavaxNetSslTrustManagerFactory *tmf = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
    [((JavaxNetSslTrustManagerFactory *) nil_chk(tmf)) init__WithJavaSecurityKeyStore:ks];
    id<JavaxNetSslX509TrustManager> defaultTrustManager = (id<JavaxNetSslX509TrustManager>) cast_check(IOSObjectArray_Get(nil_chk([tmf getTrustManagers]), 0), JavaxNetSslX509TrustManager_class_());
    JreStrongAssignAndConsume(&self->_stm_, new_NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(defaultTrustManager));
    [((JavaxNetSslSSLContext *) nil_chk(sslc)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:[IOSObjectArray arrayWithObjects:(id[]){ self->_stm_ } count:1 type:JavaxNetSslTrustManager_class_()] withJavaSecuritySecureRandom:nil];
    return sslc;
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    [self->_log_ errorWithNSString:@"Key Store update error" withJavaLangThrowable:gse];
  }
  @catch (JavaLangExceptionInInitializerError *eiie) {
    [self->_log_ errorWithNSString:@"SSL context error - Java 9 bug?" withJavaLangThrowable:eiie];
  }
  return nil;
}

void NetI2pUtilSSLEepGet_saveCertsWithNSString_withNetI2pUtilSSLEepGet_SavingTrustManager_(NSString *host, NetI2pUtilSSLEepGet_SavingTrustManager *stm) {
  NetI2pUtilSSLEepGet_initialize();
  IOSObjectArray *chain = ((NetI2pUtilSSLEepGet_SavingTrustManager *) nil_chk(stm))->chain_;
  if (chain == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Could not obtain server certificate chain"];
    return;
  }
  for (jint k = 0; k < chain->size_; k++) {
    JavaSecurityCertX509Certificate *cert = IOSObjectArray_Get(chain, k);
    NSString *name = JreStrcat("$CI$", host, '-', (k + 1), @".crt");
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"NOTE: Saving X509 certificate as ", name)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"      Issuer:     ", [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"      Valid From: ", [cert getNotBefore])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"      Valid To:   ", [cert getNotAfter])];
    @try {
      [cert checkValidity];
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"      WARNING: Certificate is not currently valid, it cannot be used"];
    }
    NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(cert, create_JavaIoFile_initWithNSString_(name));
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"NOTE: To trust them, copy the certificate file(s) to the certificates directory and rerun without the -s option"];
}

void NetI2pUtilSSLEepGet_httpProxyConnectWithNSString_withInt_(NetI2pUtilSSLEepGet *self, NSString *host, jint port) {
  if (self->_fetchHeaderTimeout_ > 0) {
    JreStrongAssignAndConsume(&self->_proxy_, new_JavaNetSocket_init());
    [self->_proxy_ setSoTimeoutWithInt:self->_fetchHeaderTimeout_];
    [((JavaNetSocket *) nil_chk(self->_proxy_)) connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithNSString_withInt_(self->_proxyHost_, self->_proxyPort_) withInt:self->_fetchHeaderTimeout_];
  }
  else {
    JreStrongAssignAndConsume(&self->_proxy_, new_JavaNetSocket_initWithNSString_withInt_(self->_proxyHost_, self->_proxyPort_));
  }
  NetI2pUtilSSLEepGet_httpProxyConnectWithJavaNetSocket_withNSString_withInt_(self, self->_proxy_, host, port);
}

void NetI2pUtilSSLEepGet_internalHttpProxyConnectWithNSString_withInt_(NetI2pUtilSSLEepGet *self, NSString *host, jint port) {
  JreStrongAssign(&self->_proxy_, NetI2pUtilInternalSocket_getSocketWithNSString_withInt_(self->_proxyHost_, self->_proxyPort_));
  NetI2pUtilSSLEepGet_httpProxyConnectWithJavaNetSocket_withNSString_withInt_(self, self->_proxy_, host, port);
}

void NetI2pUtilSSLEepGet_httpProxyConnectWithJavaNetSocket_withNSString_withInt_(NetI2pUtilSSLEepGet *self, JavaNetSocket *proxy, NSString *host, jint port) {
  JreStrongAssign(&self->_proxyIn_, [((JavaNetSocket *) nil_chk(self->_proxy_)) getInputStream]);
  JreStrongAssign(&self->_proxyOut_, [((JavaNetSocket *) nil_chk(self->_proxy_)) getOutputStream]);
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"CONNECT "])) appendWithNSString:host])) appendWithChar:':'])) appendWithInt:port])) appendWithNSString:@" HTTP/1.1\x0d\n"];
  if (self->_authState_ != nil && self->_authState_->authMode_ != JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE)) {
    [buf appendWithNSString:@"Proxy-Authorization: "];
    [buf appendWithNSString:[((NetI2pUtilEepGet_AuthState *) nil_chk(self->_authState_)) getAuthHeaderWithNSString:@"CONNECT" withNSString:host]];
    [buf appendWithNSString:@"\x0d\n"];
  }
  [buf appendWithNSString:@"\x0d\n"];
  [((JavaIoOutputStream *) nil_chk(self->_proxyOut_)) writeWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description])];
  [((JavaIoOutputStream *) nil_chk(self->_proxyOut_)) flush];
  self->_aborted_ = false;
  [self readHeaders];
  if (self->_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the proxy headers");
  if (self->_responseCode_ == 407) {
    @throw create_JavaIoIOException_initWithNSString_(@"Authorization unsupported on HTTP Proxy");
  }
  else if (self->_responseCode_ != 200) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC$", @"Invalid proxy response: ", self->_responseCode_, ' ', self->_responseText_));
  }
  if (self->_redirectLocation_ != nil) @throw create_JavaIoIOException_initWithNSString_(@"Proxy redirect not allowed");
}

void NetI2pUtilSSLEepGet_socksProxyConnectWithBoolean_withNSString_withInt_(NetI2pUtilSSLEepGet *self, jboolean isSocks5, NSString *host, jint port) {
  if (self->_fetchHeaderTimeout_ > 0) {
    JreStrongAssignAndConsume(&self->_proxy_, new_JavaNetSocket_init());
    [self->_proxy_ setSoTimeoutWithInt:self->_fetchHeaderTimeout_];
    [((JavaNetSocket *) nil_chk(self->_proxy_)) connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithNSString_withInt_(self->_proxyHost_, self->_proxyPort_) withInt:self->_fetchHeaderTimeout_];
  }
  else {
    JreStrongAssignAndConsume(&self->_proxy_, new_JavaNetSocket_initWithNSString_withInt_(self->_proxyHost_, self->_proxyPort_));
  }
  if (self->_authState_ != nil) {
    if (!isSocks5) @throw create_JavaIoIOException_initWithNSString_(@"Authorization unsupported on SOCKS 4");
    NetI2pSocksSOCKS5Client_connectWithJavaNetSocket_withNSString_withInt_withNSString_withNSString_(self->_proxy_, host, port, [self->_authState_ getUsername], [((NetI2pUtilEepGet_AuthState *) nil_chk(self->_authState_)) getPassword]);
  }
  else {
    if (isSocks5) NetI2pSocksSOCKS5Client_connectWithJavaNetSocket_withNSString_withInt_(self->_proxy_, host, port);
    else NetI2pSocksSOCKS4Client_connectWithJavaNetSocket_withNSString_withInt_(self->_proxy_, host, port);
  }
  JreStrongAssign(&self->_proxyIn_, [((JavaNetSocket *) nil_chk(self->_proxy_)) getInputStream]);
  JreStrongAssign(&self->_proxyOut_, [((JavaNetSocket *) nil_chk(self->_proxy_)) getOutputStream]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSSLEepGet)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilSSLEepGet_ProxyType)

NetI2pUtilSSLEepGet_ProxyType *NetI2pUtilSSLEepGet_ProxyType_values_[7];

@implementation NetI2pUtilSSLEepGet_ProxyType

+ (NetI2pUtilSSLEepGet_ProxyType *)NONE {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, NONE);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)HTTP {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, HTTP);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)HTTPS {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, HTTPS);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)INTERNAL {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, INTERNAL);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)SOCKS4 {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS4);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)SOCKS5 {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS5);
}

+ (NetI2pUtilSSLEepGet_ProxyType *)TRANSPARENT {
  return JreEnum(NetI2pUtilSSLEepGet_ProxyType, TRANSPARENT);
}

+ (IOSObjectArray *)values {
  return NetI2pUtilSSLEepGet_ProxyType_values();
}

+ (NetI2pUtilSSLEepGet_ProxyType *)valueOfWithNSString:(NSString *)name {
  return NetI2pUtilSSLEepGet_ProxyType_valueOfWithNSString_(name);
}

- (NetI2pUtilSSLEepGet_ProxyType_Enum)toNSEnum {
  return (NetI2pUtilSSLEepGet_ProxyType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pUtilSSLEepGet_ProxyType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSSLEepGet_ProxyType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "HTTP", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "HTTPS", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "INTERNAL", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SOCKS4", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SOCKS5", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "TRANSPARENT", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pUtilSSLEepGet_ProxyType, NONE), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, HTTP), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, HTTPS), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, INTERNAL), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS4), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, SOCKS5), &JreEnum(NetI2pUtilSSLEepGet_ProxyType, TRANSPARENT), "LNetI2pUtilSSLEepGet;", "Ljava/lang/Enum<Lnet/i2p/util/SSLEepGet$ProxyType;>;" };
  static const J2ObjcClassInfo _NetI2pUtilSSLEepGet_ProxyType = { "ProxyType", "net.i2p.util", ptrTable, methods, fields, 7, 0x4019, 2, 7, 9, -1, -1, 10, -1 };
  return &_NetI2pUtilSSLEepGet_ProxyType;
}

+ (void)initialize {
  if (self == [NetI2pUtilSSLEepGet_ProxyType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 7; i++) {
      ((void)(NetI2pUtilSSLEepGet_ProxyType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pUtilSSLEepGet_ProxyType_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pUtilSSLEepGet_ProxyType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilSSLEepGet_ProxyType)
  }
}

@end

void NetI2pUtilSSLEepGet_ProxyType_initWithNSString_withInt_(NetI2pUtilSSLEepGet_ProxyType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pUtilSSLEepGet_ProxyType_values() {
  NetI2pUtilSSLEepGet_ProxyType_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pUtilSSLEepGet_ProxyType_values_ count:7 type:NetI2pUtilSSLEepGet_ProxyType_class_()];
}

NetI2pUtilSSLEepGet_ProxyType *NetI2pUtilSSLEepGet_ProxyType_valueOfWithNSString_(NSString *name) {
  NetI2pUtilSSLEepGet_ProxyType_initialize();
  for (int i = 0; i < 7; i++) {
    NetI2pUtilSSLEepGet_ProxyType *e = NetI2pUtilSSLEepGet_ProxyType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pUtilSSLEepGet_ProxyType *NetI2pUtilSSLEepGet_ProxyType_fromOrdinal(NSUInteger ordinal) {
  NetI2pUtilSSLEepGet_ProxyType_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return NetI2pUtilSSLEepGet_ProxyType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSSLEepGet_ProxyType)

@implementation NetI2pUtilSSLEepGet_SavingTrustManager

- (instancetype)initWithJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)tm {
  NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(self, tm);
  return self;
}

- (IOSObjectArray *)getAcceptedIssuers {
  return [IOSObjectArray arrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()];
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  @throw create_JavaSecurityCertCertificateException_init();
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  JreStrongAssign(&self->chain_, chain);
  [((id<JavaxNetSslX509TrustManager>) nil_chk(tm_)) checkServerTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
}

- (void)dealloc {
  RELEASE_(tm_);
  RELEASE_(chain_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNetSslX509TrustManager:);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tm_", "LJavaxNetSslX509TrustManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chain_", "[LJavaSecurityCertX509Certificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNetSslX509TrustManager;", "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "LJavaSecurityCertCertificateException;", "checkServerTrusted", "LNetI2pUtilSSLEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilSSLEepGet_SavingTrustManager = { "SavingTrustManager", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 4, 2, 5, -1, -1, -1, -1 };
  return &_NetI2pUtilSSLEepGet_SavingTrustManager;
}

@end

void NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(NetI2pUtilSSLEepGet_SavingTrustManager *self, id<JavaxNetSslX509TrustManager> tm) {
  NSObject_init(self);
  JreStrongAssign(&self->tm_, tm);
}

NetI2pUtilSSLEepGet_SavingTrustManager *new_NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(id<JavaxNetSslX509TrustManager> tm) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet_SavingTrustManager, initWithJavaxNetSslX509TrustManager_, tm)
}

NetI2pUtilSSLEepGet_SavingTrustManager *create_NetI2pUtilSSLEepGet_SavingTrustManager_initWithJavaxNetSslX509TrustManager_(id<JavaxNetSslX509TrustManager> tm) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet_SavingTrustManager, initWithJavaxNetSslX509TrustManager_, tm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSSLEepGet_SavingTrustManager)

@implementation NetI2pUtilSSLEepGet_SSLState

- (instancetype)initWithJavaxNetSslSSLContext:(JavaxNetSslSSLContext *)ctx {
  NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(self, ctx);
  return self;
}

- (void)dealloc {
  RELEASE_(context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNetSslSSLContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LJavaxNetSslSSLContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNetSslSSLContext;", "LNetI2pUtilSSLEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilSSLEepGet_SSLState = { "SSLState", "net.i2p.util", ptrTable, methods, fields, 7, 0x9, 1, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilSSLEepGet_SSLState;
}

@end

void NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(NetI2pUtilSSLEepGet_SSLState *self, JavaxNetSslSSLContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->context_, ctx);
}

NetI2pUtilSSLEepGet_SSLState *new_NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pUtilSSLEepGet_SSLState, initWithJavaxNetSslSSLContext_, ctx)
}

NetI2pUtilSSLEepGet_SSLState *create_NetI2pUtilSSLEepGet_SSLState_initWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSSLEepGet_SSLState, initWithJavaxNetSslSSLContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSSLEepGet_SSLState)
