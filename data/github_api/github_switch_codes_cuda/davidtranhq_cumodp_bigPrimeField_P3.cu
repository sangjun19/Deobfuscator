// Repository: davidtranhq/cumodp
// File: src/BigPrimeFieldFFT_3.bak.dev/bigPrimeField_P3.cu

/*
 * bigPrimeField.h
 *
 *  Created on: Jan 18, 2016
 *      Author: dave
 */

/**** TO BE CHANGED ****
 *
 * change all c++ streams to c-format
 * chechk the existence of file and correct read/write in i/o functions
 */

#define NEW_CYCLIC_SHIFT_PLAIN

#ifndef BIG_PRIME_FIELD_H_P3
#define BIG_PRIME_FIELD_H_P3

#include <stdio.h>
using namespace std;

typedef unsigned long long int usfixn64;
typedef unsigned int usfixn32;
typedef unsigned short usfixn16;
#define SQRTR 3037000502
#define R 9223372054034644992ULL
#define TILE_DIMENSION 16

//#define R ( (1<<63)+(1<<34) (x<<29+1)<<34)

//RC R complement  RC=2^64-R
//#define RC 9223372019674906624

//ULMAX=2^64-1 //equivalent to -1
//#define ULMAX 18446744073709551615
//__device__   const usfixn64 ULMAX = 18446744073709551615ULL;
#define ULMAX 18446744073709551615ULL

//#define TN 256
//#define TN 256

//__device__  const usfixn64 R = 9223372054034644992ULL;
//__device__  const usfixn64 R_MINUS_ONE = 9223372054034644991ULL;
//__device__  const usfixn64 RC = 9223372019674906624ULL;
//__device__  const usfixn64 ZERO = 0;
#define R 9223372054034644992ULL
#define R32bit 2147483652
#define R_MINUS_ONE 9223372054034644991ULL
#define RC 9223372019674906624ULL
#define ZERO 0

#define GRID_SIZE 64
/*
 * R0 = R%(2^32)
 * R1 = R/(2^32) = 2^31+2^2
 * RC0 = RC%(2^32)
 * RC1 = RC/(2^32)
 */

#define R0 0
#define R1 2147483652ULL
#define RC0 0
#define RC1 2147483644ULL
const usfixn64 STRIDE = 1048576ULL;
//const usfixn64 STRIDE = 4194304ULL;
__constant__ usfixn64 constR=9223372054034644992ULL;
#define COEFFICIENT_SIZE 8
//#define STEPS 8
#define N_ITERATIONS 1
//#define MAX_DIM 32768 //2^15
#define MAX_DIM 1073741824
//#define UNROLL (#pragma unroll COEFFICIENT_SIZE)

#define MAX_INPUT_SIZE 1048576//1M
struct __align__(8) uConstShortArray8_align8
{
//	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
	short i[8];
};

struct __align__(8) uConstShortArray16_align8
{
//	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
	short i[16];
};

struct __align__(8) uConstArray8_align8
{
//	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
	usfixn64 i[8];
};

struct __align__(8) uConstArray16_align8
{
//	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
	usfixn64 i[16];
};

struct __align__(16) uConstArray16_align16
{
//	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
	usfixn64 i[16];
};

//struct uShortConstArray8_align8
//{
////	unsigned long long int i0, i1, i2, i3, i4, i5, i6, i7;
//	unsigned short i[8];
//};

struct  uvector4
{
	usfixn64 i0, i1, i2, i3;
};


struct __align__(8) uvector8
{
	usfixn64 i0, i1, i2, i3, i4, i5, i6, i7;
};


/*************************************************************/

typedef struct
{
	usfixn64* device_xVector;
	usfixn64* device_yVector;
	usfixn64* device_uVector;
	usfixn64* device_lVector;
	usfixn64* device_hVector;
	usfixn64* device_cVector;
	usfixn64* device_lVectorSub;
	usfixn64* device_hVectorSub;
	usfixn64* device_cVectorSub;
	usfixn64* device_parameters;
	usfixn64* device_pow_omega;
	usfixn64* device_powers_omega;
	usfixn64* device_powers_omega_K[10];
	//for N = K^e and omega^N=1
	//powers_KJ keeps powers of omega up to (K^J)-1
	//device_powers_omega_K[0] (null) and
	// device_powers_omega_K[1] (etta) are always equal to zero;

	usfixn64* parameters;
	usfixn32* device_signVector;
	usfixn64* host_powers_omega;
	usfixn32 K;
	usfixn64 e;

	usfixn64 maxGridDim = ((1<<16)-1);

	int operation = 0;
	int nIterations = 1;	//number of iterations to repeat
	int shuffle = 0;  //transpose the input matrix from Nx8 to 8xN
	int paddingMethod = 0;
	int dynamicMemSize;
	dim3 gridSize;
	cudaEvent_t startEvent;
	cudaEvent_t stopEvent;
	usfixn64 nBlocks;
	int blockSize;
	int BN;
	int inputVectorSize;
	int coefficientSize;
	int permutationStride;
	int nParameters;
	int strideSize;
	int transposeBlockSize;
} data;

/*************************************************************/

__device__  __inline__ usfixn64 getUvector8Element(const uvector8 & __restrict__ xm, const short en)
{
	if (en == 0)
		return xm.i0;
	if (en == 1)
		return xm.i1;
	if (en == 2)
		return xm.i2;
	if (en == 3)
		return xm.i3;
	if (en == 4)
		return xm.i4;
	if (en == 5)
		return xm.i5;
	if (en == 6)
		return xm.i6;
	if (en == 7)
		return xm.i7;
}

__device__ __inline__ void setUvector8Element(uvector8 & __restrict__ xm, const short en, const usfixn64 value)
{
	if (en == 0)
	{
		xm.i0 = value;
		return;
	}

	if (en == 1)
	{
		xm.i1 = value;
		return;
	}

	if (en == 2)
	{
		xm.i2 = value;
		return;
	}

	if (en == 3)
	{
		xm.i3 = value;
		return;
	}

	if (en == 4)
	{
		xm.i4 = value;
		return;
	}

	if (en == 5)
	{
		xm.i5 = value;
		return;
	}

	if (en == 6)
	{
		xm.i6 = value;
		return;
	}

	if (en == 7)
	{
		xm.i7 = value;
		return;
	}
}

__device__ __inline__ void incUvector8Element(uvector8 & __restrict__ xm, const short en, const short incValue)
{
	if (en == 0)
	{
		xm.i0 += incValue;
		return;
	}

	if (en == 1)
	{
		xm.i1 += incValue;
		return;
	}

	if (en == 2)
	{
		xm.i2 += incValue;
		return;
	}

	if (en == 3)
	{
		xm.i3 += incValue;
		return;
	}

	if (en == 4)
	{
		xm.i4 += incValue;
		return;
	}

	if (en == 5)
	{
		xm.i5 += incValue;
		return;
	}

	if (en == 6)
	{
		xm.i6 += incValue;
		return;
	}

	if (en == 7)
	{
		xm.i7 += incValue;
		return;
	}
}

__device__ __inline__ void decUvector8Element(uvector8 & __restrict__ xm, const short en, const short decValue)
{
	if (en == 0)
	{
		xm.i0 -= decValue;
		return;
	}

	if (en == 1)
	{
		xm.i1 -= decValue;
		return;
	}

	if (en == 2)
	{
		xm.i2 -= decValue;
		return;
	}

	if (en == 3)
	{
		xm.i3 -= decValue;
		return;
	}

	if (en == 4)
	{
		xm.i4 -= decValue;
		return;
	}

	if (en == 5)
	{
		xm.i5 -= decValue;
		return;
	}

	if (en == 6)
	{
		xm.i6 -= decValue;
		return;
	}

	if (en == 7)
	{
		xm.i7 -= decValue;
		return;
	}
}

struct __align__(16) uConstArray8
{
	usfixn64 i[8];
};

struct __align__(16) uConstArray4
{
	usfixn64 i[4];
};

struct __align__(16) uConstArray2
{
	usfixn64 i[2];
};
//typedef unsigned long long int __u128;

//typedef  struct {
//	unsigned long long int u0;
//	unsigned long long int u1;
//}__u128;

//typedef ulonglong2 __u128;

/*************************************************************/
__device__  __inline__ usfixn64
getUvector4Element (const uvector4 & __restrict__ xm, const short en)
{
	if (en == 0)
		return xm.i0;
	if (en == 1)
		return xm.i1;
	if (en == 2)
		return xm.i2;
	if (en == 3)
		return xm.i3;
}
/*************************************************************/

__device__ __inline__ void
setUvector4Element (uvector4 & __restrict__ xm, const short en,
										 const usfixn64 value)
{
	if (en == 0)
	{
		xm.i0 = value;
		return;
	}

	if (en == 1)
	{
		xm.i1 = value;
		return;
	}

	if (en == 2)
	{
		xm.i2 = value;
		return;
	}

	if (en == 3)
	{
		xm.i3 = value;
		return;
	}
}
/*************************************************************/
/*******************************************
 * FROM FFT 4096
 *******************************************/
//N the FFT size, where each element contains eight unsigned integers.
#define N 4096
//BN block number
//#define BLOCK_DIM 512
//TN thread number in a block
#define THREAD_DIM 512
//input number count

#define TN 256

//#define BLOCK_SIZE 128
#define BLOCK_SIZE 256

/*************************************************************/
__device__ __inline__ usfixn64 get_tid(usfixn64& tid)
{
	//blockSize=128
	tid=blockIdx.x;
	tid<<=8;
	tid+=threadIdx.x;
}

/*******************************************
 * FROM FFT
 *******************************************/

#define INC 256
//const int sharedMemSizePadding0 = 8 * TN;
//const int sharedMemSizePadding1 = 8 * TN + 28;
//const int sharedMemSizePadding2 = 8 * TN + 32;
//const int sharedMemSizePadding3 = 8 * TN + (TN * TN) / 16;
//const int sharedMemSizePadding4 = 8 * TN + (TN * TN - 4 * TN) / 32;

//extern const int sharedMemSizePadding0 = 8 * TN;
//extern const int sharedMemSizePadding1 = 8 * TN + 28;
//extern const int sharedMemSizePadding2 = 8 * TN + 32;
//extern const int sharedMemSizePadding3 = 8 * TN + (TN * TN) / 16;
//extern const int sharedMemSizePadding4 = 8 * TN + (TN * TN - 4 * TN) / 32;

__constant__ short shNo_FFT_16_r2[8] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft16 (4 rounds, 8 cases), round 2/4
__constant__ short shNo_FFT_16_r3[8] = { 0, 0, 4, 4, 2, 2, 6, 6 }; //to support fft16 (4 rounds, 8 cases), round 3/4
__constant__ short shNo_FFT_16_r4[8] = { 0, 4, 2, 6, 1, 5, 3, 7 }; //to support fft16 (4 rounds, 8 cases), round 4/4
//__constant__ short shNo_FFT_16_r5[16] =
//		{ 0,4,2,6,
//				1,5,3,7,
//				8,12,10,14,
//				9,13,11,15
//		}; //to support fft16 (4 rounds, 8 cases), round 4/4

__constant__ short shNo_FFT_16_r5[16] = { 0, 2, -2, 0, -7, -5, -9, -7, 7, 9, 5,
		7, 0, 2, -2, 0 }; //to support fft16 (4 rounds, 8 cases), round 4/4

__constant__ short shNo_FFT_32_r2[16] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft32 (5 rounds, 16 cases), round 2/5
__constant__ short shNo_FFT_32_r3[16] = { 0, 4, 2, 6, 0, 4, 2, 6 }; //to support fft32 (5 rounds, 16 cases), round 3/5
__constant__ short shNo_FFT_32_r4[16] = { 0, 4, 2, 6, 1, 5, 3, 7 }; //to support fft32 (5 rounds, 16 cases), round 4/5
__constant__ short shNo_FFT_32_r5[16] = { 0, 4, 2, 6, 1, 5, 3, 7 }; //to support fft32 (5 rounds, 16 cases), round 5/5

__constant__ short shNo_FFT_64_r2[32] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft64 (6 rounds, 32 cases), round 2/6
__constant__ short shNo_FFT_64_r3[32] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft64 (6 rounds, 32 cases), round 3/6
__constant__ short shNo_FFT_64_r4[32] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft64 (6 rounds, 32 cases), round 4/6
__constant__ short shNo_FFT_64_r5[32] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft64 (6 rounds, 32 cases), round 5/6
__constant__ short shNo_FFT_64_r6[32] = { 0, 0, 0, 0, 4, 4, 4, 4 }; //to support fft64 (6 rounds, 32 cases), round 6/6

__constant__ short ind2[8] = { 0, 0, 0, 0, 4, 4, 4, 4 };
__constant__ short ind3[8] = { 0, 4, 2, 6, 0, 4, 2, 6 };
__constant__ short ind4[8] = { 0, 4, 2, 6, 1, 5, 3, 7 };
__constant__ short ind5[16] = { 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11,
		7, 15 };

__constant__ usfixn64 const_device_parameters[16] = { 0 };

__constant__ usfixn64 W_0[15][8] = { 4832614680308292603u, 8402438242641148880u,
		2486701145004827901u, 1215222897245048005u, 8892305690461566140u,
		7297077274619179662u, 5862425953453277502u, 3703360755969114825u,
		2302450199823606216u, 27080194135346259u, 5112443829649209337u,
		8827039575836218556u, 1287512346408126576u, 4365726449074111407u,
		3360903764649200564u, 117722958365041421u, 390324908435919352u,
		770891875385868514u, 2999696378145516236u, 3132067064637725081u,
		3345465055005335275u, 5514352822140455844u, 6208596698165918434u,
		3765508936539829447u, 9210848751572284741u, 1645667176001997922u,
		5941128666689277807u, 6768772028034979755u, 4304177272275830547u,
		6104712663442007465u, 1954368461670077480u, 6432833914249218714u,
		5366875984871234376u, 8713960611431090699u, 7737743610771967836u,
		4469224371143296702u, 8872582861821233821u, 3739059486843436842u,
		8813835214102132195u, 5147471904605268606u, 2493293057650284961u,
		8167589484735262926u, 6404888664753609044u, 2974179143108738507u,
		4816710638611137048u, 1700523433557964716u, 5243180851737162921u,
		7115155689365786339u, 3506894965669318197u, 7418365113978784395u,
		8014352668811394697u, 2170069100293384465u, 4477472493274660183u,
		8475805979162198949u, 3965693063579606190u, 7514110372369303684u,
		6476678624121558179u, 3216147715999829916u, 4168578045703223305u,
		5665582343424371252u, 4802751892420194639u, 7507476765166618649u,
		794581407066667206u, 4885142567208165039u, 5149649432978519211u,
		5596777036269387984u, 8665828768845738479u, 1575627868412583125u,
		6499525351416721532u, 5094347230997088364u, 8715176080936469701u,
		1841878500194672339u, 7542379292388838454u, 9056921649810209609u,
		8630708080678083361u, 6562740377707965803u, 802590099908464585u,
		7056946099352360173u, 7815206358853348244u, 8556126457443025758u,
		2735242483360463802u, 1509217343334731913u, 8137216084652364444u,
		5194826376948744458u, 8888111600302919097u, 5096574789189059728u,
		2602858914188694775u, 1490780946449946389u, 1871173134326118337u,
		6362464371896225965u, 8698229383614300186u, 2005452311774545610u,
		7556559507024761731u, 5864043929342978154u, 7933436335374648226u,
		5827741928560708899u, 1224342742045833269u, 972714779852171763u,
		2469969374900767744u, 925611663966851379u, 5253808685097889801u,
		7052192790816421625u, 6899658349937940167u, 1281442313926189540u,
		5206235348781813121u, 976526785949102141u, 4199848929055484124u,
		663415973782467310u, 4667091686862902153u, 5656282773537629911u,
		1019143404946265847u, 4695224974402318448u, 6954395578847384962u,
		5241574410285476070u, 1626120174922578762u, 2533521736498923254u,
		3068873176292580125u, 753173231159502005u, 4879546884467215097u,
		6201146281074609078u };

//usfixn64 host_pow_omega[128] = {};
//		0u,0u,0u,0u,0u,0u,0u,0u,0,
//		4832614680308292603u, 8402438242641148880u,
//		2486701145004827901u, 1215222897245048005u, 8892305690461566140u,
//		7297077274619179662u, 5862425953453277502u, 3703360755969114825u,
//		2302450199823606216u, 27080194135346259u, 5112443829649209337u,
//		8827039575836218556u, 1287512346408126576u, 4365726449074111407u,
//		3360903764649200564u, 117722958365041421u, 390324908435919352u,
//		770891875385868514u, 2999696378145516236u, 3132067064637725081u,
//		3345465055005335275u, 5514352822140455844u, 6208596698165918434u,
//		3765508936539829447u, 9210848751572284741u, 1645667176001997922u,
//		5941128666689277807u, 6768772028034979755u, 4304177272275830547u,
//		6104712663442007465u, 1954368461670077480u, 6432833914249218714u,
//		5366875984871234376u, 8713960611431090699u, 7737743610771967836u,
//		4469224371143296702u, 8872582861821233821u, 3739059486843436842u,
//		8813835214102132195u, 5147471904605268606u, 2493293057650284961u,
//		8167589484735262926u, 6404888664753609044u, 2974179143108738507u,
//		4816710638611137048u, 1700523433557964716u, 5243180851737162921u,
//		7115155689365786339u, 3506894965669318197u, 7418365113978784395u,
//		8014352668811394697u, 2170069100293384465u, 4477472493274660183u,
//		8475805979162198949u, 3965693063579606190u, 7514110372369303684u,
//		6476678624121558179u, 3216147715999829916u, 4168578045703223305u,
//		5665582343424371252u, 4802751892420194639u, 7507476765166618649u,
//		794581407066667206u, 4885142567208165039u, 5149649432978519211u,
//		5596777036269387984u, 8665828768845738479u, 1575627868412583125u,
//		6499525351416721532u, 5094347230997088364u, 8715176080936469701u,
//		1841878500194672339u, 7542379292388838454u, 9056921649810209609u,
//		8630708080678083361u, 6562740377707965803u, 802590099908464585u,
//		7056946099352360173u, 7815206358853348244u, 8556126457443025758u,
//		2735242483360463802u, 1509217343334731913u, 8137216084652364444u,
//		5194826376948744458u, 8888111600302919097u, 5096574789189059728u,
//		2602858914188694775u, 1490780946449946389u, 1871173134326118337u,
//		6362464371896225965u, 8698229383614300186u, 2005452311774545610u,
//		7556559507024761731u, 5864043929342978154u, 7933436335374648226u,
//		5827741928560708899u, 1224342742045833269u, 972714779852171763u,
//		2469969374900767744u, 925611663966851379u, 5253808685097889801u,
//		7052192790816421625u, 6899658349937940167u, 1281442313926189540u,
//		5206235348781813121u, 976526785949102141u, 4199848929055484124u,
//		663415973782467310u, 4667091686862902153u, 5656282773537629911u,
//		1019143404946265847u, 4695224974402318448u, 6954395578847384962u,
//		5241574410285476070u, 1626120174922578762u, 2533521736498923254u,
//		3068873176292580125u, 753173231159502005u, 4879546884467215097u,
//		6201146281074609078u };

__constant__ usfixn64 W12[15][8] = { 6368537335278011409u, 6559905493361745650u,
		1611630010065826713u, 5205069994608960148u, 2852366324136299255u,
		4741025511079831292u, 4495713848194575320u, 2464458433847228250u,
		43390553589054774u, 5689918209556578671u, 8845941305773747342u,
		2840602737422012834u, 813638098239981480u, 314969166600807247u,
		7711698714301782605u, 4708052650754658993u, 5962349939731889267u,
		9187502500840055454u, 6223916889772168053u, 8200297666652537596u,
		7243141932147185220u, 5827178249755404095u, 1233738160859353199u,
		9135786083964470993u, 7137107724604502333u, 2979207810221979654u,
		3328860960606119836u, 4152055445595025560u, 790279036532063445u,
		2243751449889058377u, 495802657723411899u, 7620665221889874093u,
		3608334579833484687u, 9091502745705873137u, 9068759319444887825u,
		2982042472509517038u, 5851203093862561394u, 4689164771082797939u,
		1424759403320645141u, 4411089293600739857u, 6907127599491296095u,
		8552897415997102153u, 8679320014683906997u, 2223828807493710814u,
		858649556069331575u, 1957943790061739103u, 5549400026053976849u,
		2098463206672069964u, 4646819650281801505u, 6241670829831344849u,
		7429385380966888965u, 419444289839068823u, 4130637287415002184u,
		7908303496741499390u, 7328076545823401678u, 8906856790568058462u,
		4266425184611474885u, 2745888046073582606u, 4460272313717620391u,
		1534602007411134351u, 7389417065503563175u, 2496816640994598707u,
		8340578439454199486u, 3540970978625599238u, 6593137379340673094u,
		938822237580288165u, 6173761731301493950u, 6345868649901054830u,
		33203932990054256u, 8285674207975771116u, 391365543956029330u,
		5765341871901814199u, 8750005390432559331u, 1004177955874976073u,
		6526666171281335965u, 8919526347441079930u, 4587145129984655982u,
		2120995648749380660u, 6807125005630921771u, 1404319894383668875u,
		9174822346926590820u, 8683903108746749848u, 518805224601400271u,
		8263206596169269816u, 3992802788711728259u, 4526014523036653276u,
		8216527007903401430u, 3643499083168944286u, 6572700652819984097u,
		5654349319026678090u, 2945958918231407402u, 8315817940191554115u,
		3903961909722922192u, 8751115554095427145u, 1720087832858432991u,
		2017660982864315227u, 4932201570704995548u, 2441758989690403245u,
		6315068009463966664u, 8141367093872374404u, 2386952287665435440u,
		8630517035780209587u, 3791877247993007898u, 4994465731821916226u,
		5005814032629966111u, 7629929215843812243u, 5751181848221439447u,
		4576230681179567819u, 8125534392733532035u, 5560926371000433936u,
		1888459826216152816u, 3747509517407033084u, 7980171858755715406u,
		4008475782978845368u, 8932281156699250062u, 1016300905947845519u,
		6522461459654622787u, 3266045571977616788u, 6955253718610834946u,
		7667560955258982823u };
__constant__ usfixn64 W16[15][8] = { 3006370066595279709u, 3782262637662174695u,
		4774667134945453143u, 7390498005841228038u, 2430596464728967792u,
		8280774632104889468u, 6623214708194984944u, 2614500752162691591u,
		8816938155464702529u, 3706565079792625720u, 5700587314643272992u,
		9081268561225285341u, 3742668007806798414u, 219006490403163241u,
		6555121409556599293u, 619595731419319046u, 7125943389931267119u,
		9102905563943801299u, 5126318784044180744u, 1840476394856931165u,
		4734522244195204554u, 4446720878807858978u, 1465735233737441534u,
		9141346959181243938u, 7238850373747071574u, 3421722769799276146u,
		3605960622287093330u, 5615526701043691871u, 5987135835531705030u,
		4592117420273897548u, 4297308844345453283u, 1582988213281168002u,
		1958652214492452177u, 3866660406659619836u, 1748812593028471511u,
		9156565293891688833u, 954769817498911500u, 3304769054508767064u,
		8023664163237704382u, 1358174849470882936u, 4024480772940697201u,
		3138121140116141962u, 5319250646176980025u, 5769776673728266447u,
		7824873459455557320u, 1471083240729778152u, 1512398299696802745u,
		4815047575398614010u, 4960037255635211982u, 3222259664270834564u,
		145757677427459038u, 3866062095924381007u, 9139164790258791352u,
		2122634499199573707u, 5705627251702193578u, 1007440913992157340u,
		7981465692565196598u, 758164073934943750u, 8092267366146177062u,
		6328413749839545375u, 1409518216045347123u, 3745783276278595597u,
		5016761400313803385u, 244667108070889342u, 7458378155224591849u,
		6700850949988090323u, 8429569059329231707u, 3900555209317066428u,
		2580064796542557327u, 2330943047179410679u, 4678117607704355473u,
		8868258420852560284u, 1056428342586890892u, 3583308366490261645u,
		373441718173383040u, 8114613508589847156u, 2387658483236314119u,
		1951882842630615779u, 4182434194191353116u, 2087439161083770738u,
		1295541677614975979u, 8304821556901566758u, 7600505033415929188u,
		8545534317505075137u, 5079777146908193381u, 8020024906592432531u,
		3012818430327884827u, 8006501689739503680u, 7814992315030354129u,
		3274432195841795110u, 6118362530917551209u, 2329169177125719489u,
		6544952968060818u, 8503079195181123741u, 3879911002364542365u,
		2726159217504441781u, 4081850729939701628u, 3191017481995419158u,
		6275953065807032088u, 1370593395923751996u, 3647175153941951850u,
		5931784142067835657u, 8898752865083446498u, 8487268107029637522u,
		6530612670287071899u, 2817203841761442454u, 4011136235211278128u,
		4374832133679005571u, 2837754611208897105u, 1618510605215255457u,
		486997559487993043u, 2800884173332122954u, 3749279512132763892u,
		8690413992066521869u, 3725041012226324385u, 2771447717726749198u,
		2440146651011894402u, 9079794031669681697u, 1477887754829831604u,
		6695920399073449841u };
__constant__ usfixn64 W20[15][8] = { 2094657654529411228u, 1874933489908008877u,
		6772029229527564241u, 4924424746725594203u, 2669790826289816776u,
		6008940768097561304u, 1428899285904723708u, 3266193411217977525u,
		138426599768550301u, 6481282715391704207u, 6283415427083676378u,
		3197384551042727711u, 2456673898495528529u, 6136269307916091307u,
		5630809915478409226u, 8043798999810556290u, 8422966900421295099u,
		331151803767016750u, 3490153773066443835u, 1084357015997404523u,
		1192442687398231903u, 1440399075933353991u, 4463897891775381539u,
		1549404707838784300u, 1241274152157544391u, 2717649403172491102u,
		5428170064498949614u, 3819947450412250480u, 4325234897276133104u,
		1072482933559798114u, 5074636265416201703u, 8123808161658686761u,
		6405673649501298505u, 5922572879083179230u, 8407378843661000777u,
		8727087190724518130u, 715758175863965659u, 6800197200322261653u,
		7131426094646383322u, 6141168093117979109u, 6899333626602357791u,
		238483997890824147u, 3473468640762281280u, 1611881855156301605u,
		1207097130233599245u, 2779471946572263353u, 3446067825813260479u,
		1684988849176665164u, 6203915632888220116u, 6557690790857481725u,
		5021744546528100420u, 7192849881679404157u, 6861603466132154303u,
		2179387987843149602u, 7722546021092411873u, 6433208540818943333u,
		1918959985148445310u, 62390779226024247u, 2953865821585852732u,
		8832275090902445875u, 7643135054298427082u, 8814181381229800156u,
		3429096051941704526u, 1369285775060777994u, 5700728876909269292u,
		6072125199721242393u, 645810693208198302u, 6371303033002198671u,
		6431021097864216073u, 7763090044662680087u, 8547402866115794226u,
		8256866257120912622u, 8629409383013415447u, 4646136419943285899u,
		3249217443409211714u, 8809472087243418857u, 1241666329040448882u,
		3977265503633788372u, 2399032830572181117u, 404428698434593775u,
		1034745726355359013u, 5780430645935719130u, 7276479573294730763u,
		4638262753731267168u, 2878067424497565156u, 3715539710184518351u,
		3013614438228264168u, 8944952554913336114u, 6434142395025400292u,
		1945026289917011088u, 7751570819617564489u, 3577660297679292775u,
		1887751614217618515u, 3370781657569414041u, 3147791024890462506u,
		2739819199782673425u, 225297369991865730u, 7436115953854748242u,
		4669596064763193426u, 5609898869083476736u, 6020406955634738404u,
		6542335674098563284u, 431840566424992069u, 5323274136466655639u,
		5039767721703805154u, 3507127470050419456u, 5467699198250670282u,
		4605973736482646u, 7211493787590730750u, 6389218567027858581u,
		6369746506002118784u, 1427158368736903301u, 8578683438174047705u,
		2830643883343961556u, 3370777893973522806u, 7049347005369424582u,
		5416754782040679767u, 7240510424632037619u, 2470560349253849106u,
		4882454104227556398u };
__constant__ usfixn64 W24[15][8] = { 7651665413839504047u, 4494057363764474140u,
		8486424765903903151u, 3098172693553047908u, 5793710114497482112u,
		8806649171840145749u, 5452389321454387529u, 7359030844583626106u,
		3143781616945029459u, 3838018006397439943u, 7221435095246147043u,
		6719777801270331995u, 7629811503723625374u, 3495464411120386308u,
		9060013406001256393u, 783452366975374093u, 1736579118732691671u,
		628074136283528523u, 4868835393823627338u, 2237466859000000362u,
		5928573644596560429u, 775651498496439375u, 6193596017888085441u,
		2856772895245971587u, 6619279187550442103u, 6672797718111533333u,
		4585572439994587095u, 2320708279686486197u, 1967162587545328732u,
		2286270625854470690u, 1466399497681167039u, 74129947264727246u,
		5115677663647077028u, 1149629935203294536u, 8239558042461317190u,
		2093058799874099409u, 6253624369706866223u, 7679051254909301482u,
		4029554257096547023u, 4484752021829099380u, 1224103195011319710u,
		7748363627103633794u, 9045180451380581002u, 2212351111167866412u,
		3782058105276009877u, 8695163935942028952u, 8533057948015650743u,
		8668062236265483458u, 4252853508362582815u, 4084310759376965869u,
		8637491841819748155u, 1122471831225285593u, 4868668863783016133u,
		172148462210428924u, 8041342836095768564u, 8137552297942858756u,
		4718432596854144008u, 8395476130236506478u, 849258159608788765u,
		2385083741171156415u, 1893990415552175293u, 8845564351549673073u,
		5296861600082211952u, 5790871676227276177u, 2558199393477890227u,
		2286777303798489019u, 7290896120447815229u, 1087736033683488356u,
		3233538458063410178u, 8245613835142232393u, 284789579572249726u,
		2107522681282643627u, 8796167062570075119u, 7516428514481720367u,
		6799511782816783872u, 6380333507059198585u, 1192592460195891196u,
		3367423065652605475u, 7113880659446704564u, 1778306093194925568u,
		4425320601763114056u, 8040442985044632654u, 4290283958996082457u,
		5090995746989133692u, 2416554927487554821u, 4817181417651550341u,
		3699462065542763875u, 2271896955554592208u, 3828108457042746435u,
		1426979824127340284u, 8728213755202421860u, 5856824756145019556u,
		1160591506864909441u, 7966970680263190562u, 6513725650168170156u,
		511527149298584934u, 2730052615806903892u, 3886407001682305297u,
		2956739463058437375u, 5764178023578064992u, 8641946203099481387u,
		7775374034538871454u, 3599115992636436245u, 2191668898145290846u,
		1121853962187938628u, 8927501053379065736u, 6673563515517607882u,
		4928482465553414419u, 446302744873136398u, 3255731337941165095u,
		4091740170832344045u, 6357571692469457015u, 595259163142599786u,
		8339829252518716212u, 6422038539823944285u, 1873738540944185089u,
		1171201291072818932u, 2474297010996193353u, 3783381178171742213u,
		2854015431302544325u };

//extern __constant__ short ind2[8] =
//{ 0, 0, 0, 0, 4, 4, 4, 4 };
//extern __constant__ short ind3[8] =
//{ 0, 4, 2, 6, 0, 4, 2, 6 };
//extern __constant__ short ind4[8] =
//{ 0, 4, 2, 6, 1, 5, 3, 7 };
//extern __constant__ short ind5[16] =
//{ 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 };
//extern __constant__ short ind2[8];
//extern __constant__ short ind3[8];
//extern __constant__ short ind4[8];
//extern __constant__ short ind5[16];

/*
 *  declaration of cuda constants
 * initiliazed in bigArithmeticKernels.h
 */
//
//extern __constant__ short ind2[8];
//extern __constant__ short ind3[8];
//extern __constant__ short ind4[8];
//extern __constant__ short ind5[16];
//
//extern __constant__ usfixn64 W_0[15][8];
//extern __constant__ usfixn64 W12[15][8];
//extern __constant__ usfixn64 W16[15][8];
//extern __constant__ usfixn64 W20[15][8];
//extern __constant__ usfixn64 W24[15][8];
//extern __shared__ usfixn64 sharedMem[];
/***********************************************
 * product used in multiplication
 **********************************************/

typedef struct
{
	usfixn64 l, h;
	short c;
} product;

/***********************************************
 * uform used in multiplication
 **********************************************/

typedef struct
{
	usfixn64 u0;
	short u1;
} urform;

/**********************************************/

// unsigned long* vectorGenerator(unsigned long * vector, int &vectorSize, int &coeffientSize, int mode, int seed)
// {
// 	std::default_random_engine generator;
// 	std::uniform_real_distribution<double> rDistribution(0.0, 1.0);
// 	generator.seed(seed);
// 	double generated;
// 	switch (mode) {
// 		case 0:
// 			cout<<"all less than R-1 and random (default)"<<endl;
// 			break;
// 		case 1:
// 			cout<<"all zero except the last one equal to R (corner case)"<<endl;
// 			break;
// 		case 2:
// 			cout<<"all equal to seed = "<<seed<<endl;
// 			break;
// 	}
// 	for (int i = 0; i < vectorSize * coeffientSize; i++)
// 	{
// 		generated = rDistribution(generator);
// 		switch (mode)
// 		{
// 		case 0:	/* 0: all less than R-1 and random (default)*/
// //			if (i % 8 != 7) //all digits except the biggest one
// 				vector[i] = generated*(R-1);
// //				cout<<vector[i]<<endl;
// //			else
// //				vector[i] = generated*(R-1);
// 			break;
// 		case 1:	/* 1: all zero except the last one equal to R (corner case)*/
// 			if (i % 8 != 7) //all digits except the biggest one
// 				vector[i] = 0;
// 			else
// 				vector[i] = R;
// 			break;
// 		case 2:	/* 2: all equal to seed*/
// 			vector[i] = seed;
// 			break;
// 		}
// 	}
// 	return vector;
// }
// /**********************************************/
// //takes a row-major vector, with number of rows and columns as parameters
// unsigned long* transposeMatrix(unsigned long *matrix, int nRows, int nColumns)
// {
// 	unsigned long *tmp = (unsigned long *) malloc(nRows * nColumns * sizeof(unsigned long));
// 	for (int i = 0; i < nRows; i++)
// 		for (int j = 0; j < nColumns; j++)
// 			tmp[j * nRows + i] = matrix[i * nColumns + j];
// 	free(matrix);
// 	return tmp;
// }
// /**********************************************/
// void printVector(unsigned long * vector, int &vectorSize, int &coefficientSize, char* vectorName = "v")
// {
// 	for (int i = 0; i < vectorSize; i++)
// 	{
// 		for (int j = 0; j < coefficientSize; j++)
// 			cout << vectorName << "[" << i << "," << j << "]=" << vector[i * coefficientSize + j] << endl;
// 		cout << endl;
// 	}
// }
// /**********************************************/
// void printVectorToFile(unsigned long * vector, int &vectorSize, int &coefficientSize, char* fileName = "vector")
// {
// 	FILE * writeFile = fopen(fileName, "w");
// 	for (int i = 0; i < vectorSize; i++)
// 	{
// 		for (int j = 0; j < coefficientSize; j++)
// 			fprintf(writeFile, "%lu\n", vector[i * coefficientSize + j]);
// 		fprintf(writeFile, "\n");
// 	}
// 	fclose(writeFile);
// }
// /**********************************************/
// void printTwoVectors(unsigned long *vector1, unsigned long *vector2, int &vectorSize, int &coefficientSize, char* vectorName1 = "v1", char* vectorName2 = "v2")
// {
// 	for (int i = 0; i < vectorSize; i++)
// 	{
// 		for (int j = 0; j < coefficientSize; j++)
// 		{
// 			cout << vectorName1 << "[" << i << "," << j << "]=" << vector1[i * coefficientSize + j] << "\t";
// 			cout << vectorName2 << "[" << i << "," << j << "]=" << vector2[i * coefficientSize + j] << endl;
// 		}
// 		cout << "=================================" << endl;
// 	}
// }
// /**********************************************/
// void printThreeVectors(unsigned long *vector1, unsigned long *vector2, unsigned long *vector3, int &vectorSize, int &coefficientSize, char* vectorName1 = "v1", char* vectorName2 =
// 		"v2", char* vectorName3 = "v3")
// {
// 	for (int i = 0; i < vectorSize; i++)
// 	{
// 		for (int j = 0; j < coefficientSize; j++)
// 		{
// //			cout<<vectorName1<<"["<<i<<","<<j<<"]="<<vector1[i*coefficientSize+j]<<"\t";
// //			cout<<vectorName2<<"["<<i<<","<<j<<"]="<<vector2[i*coefficientSize+j]<<"\t";
// //			cout<<vectorName3<<"["<<i<<","<<j<<"]="<<vector3[i*coefficientSize+j]<<endl;
// 			cout << vector1[i * coefficientSize + j] << "\t";
// 			cout << vector2[i * coefficientSize + j] << "\t";
// 			cout << vector3[i * coefficientSize + j] << endl;
// 		}
// 		cout << "=================================" << endl;
// 	}
// }
// /**********************************************/
// unsigned long* readVectorFromFile(unsigned long *vector, int &vectorSize, int &coefficientSize, char *fileName = NULL)
// {
// 	FILE * readFile = fopen(fileName, "r");
// 	fread(vector, sizeof(unsigned long), vectorSize * coefficientSize, readFile);
// 	return vector;
// }
// /**********************************************/
#endif /* BIG_PRIME_FIELD_H_P3 */
